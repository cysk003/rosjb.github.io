<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BCP 协议</title>
    <url>/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>RouterOS 支持 BCP(Bridge Control Protocol)，即在 PPP、 PPTP、 L2TP 和 PPPoE 接口上的桥接（ OVPN和 SSTP 不支持）。 BCP 协议通过 PPP 协议，将两个远端的以太网数据链路打通。 BCP 建立后独立于 PPP 隧道，将不会与任何 PPP 的 IP 地址接口有关系。 BCP 能用于替代 EoIP+VPN 隧道， EoIP 要求对等的网络连接，而BCP 为网络提供另一种方式的解决，特别是一端在 nat 网络内，经过测试能正常透过 nat 网络透传二层数据。<br>BCP (Bridge Control Protocol)需要在两边同时启用才能工作(PPP 服务器和 PPP 客户端)。 MikroTikRouterOS 也可应用于其他的 PPP 设备，要求这个设备支持标准的 BCP 协议。</p>
<hr>
<h3 id="配置事例"><a href="#配置事例" class="headerlink" title="配置事例"></a>配置事例</h3><a id="more"></a>
<p>我们需要相互连接 2 个远程办公室，并让他们在同一个以太网内工作。我们要求使用加密（ encryption）保护 2个办公室的数据交换。 如下图，我有 2 个办公室，办公室 1 设置为 PPTP 服务器，办公室 2 设置为 PPTP 客户端。下面通过 winbox和 CLI 介绍配置：</p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2412.jpg" alt></p>
<h4 id="Office1-配置"><a href="#Office1-配置" class="headerlink" title="Office1 配置"></a>Office1 配置</h4><p>首先我们需要建立一个桥接口，并确保桥接将一直有 MAC 地址存在。原因很简单，当 BCP 被使用 PPP 桥接 port中，不会有任何 MAC 地址生成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/interface bridge add name=bridge_local protocol-mode=rstp</span><br><span class="line">/interface bridge port add bridge=bridge_local interface=ether1_local</span><br><span class="line">/interface bridge <span class="built_in">set</span> bridge_local admin-mac=xx:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure>

<p>其中 xx:xx:xx:xx:xx:xx 是 ether1_local 的 MAC 地址 现在我们能分配本地和公网地址到相应的接口上： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip address add address=192.168.88.1/24 interface=bridge_local </span><br><span class="line">/ip address add address=1.1.1.1/24 interface=ether2_public</span><br></pre></td></tr></table></figure>
<p>在这个事例中，仅使用 PPP 做桥接，PPP profile 和 secret 的配置非常简单-仅分配用户名和密码，并指定 profile的 bridge 选项。 PPP 桥接不需要任何 IP 地址，但正常的 PPP 是必需的，所以要指定 local 和 remote 地址在服务器上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ppp profile add name=ppp_bridging bridge=bridge_local use-encryption=yes</span><br><span class="line">/ppp secret add profile=ppp_bridging name=ppp1 password=ppp1</span><br></pre></td></tr></table></figure>

<p>当桥接的 PPP 隧道需要通过二层（ MAC）数据包头部信息，由于默认的接口 MTU（ PPTP 是 1460）不能满足这个的通讯，所以为确保适用运用环境，建议不用考虑 MTU 值，通过在服务器的 MRRU 选项设置更高的值。<br>MRRU 允许启用支持单连接协商的多重链路，奋力数据包到多个通道，因此增加 MTU 和 MRU（支持 65535 字节）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/interface pptp-server server <span class="built_in">set</span> enabled=yes mrru=1600</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Office2-配置"><a href="#Office2-配置" class="headerlink" title="Office2 配置"></a>Office2 配置</h4><p>首先我们需要建立桥，并确定桥将有 MAC 地址存在，原因如上提到。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/interface bridge add name=bridge_local protocol-mode=rstp</span><br><span class="line">/interface bridge port add bridge=bridge_local interface=ether1_local</span><br><span class="line">/interface bridge <span class="built_in">set</span> bridge_local admin-mac=xx:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure>
<p>其中 xx:xx:xx:xx:xx:xx 是 ether1_local 的 MAC 地址。 现在我们能分配本地和公网地址到相应的接口上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip address add address=192.168.88.254/24 interface=bridge_local</span><br><span class="line">/ip address add address=2.2.2.2/24 interface=ether2_public</span><br></pre></td></tr></table></figure>
<p>配置 PPP Profile，回应在服务器端的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ppp profile add name=ppp\_bridging bridge=bridge\_local use-encryption=yes</span><br></pre></td></tr></table></figure>
<p>创建一个 pptp-client 接口，不要忘记配置 MRRU 选项，确保二层帧能通过 PPP 隧道。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/interface pptp-client add profile=ppp_bridging mrru=1600 connect-to=1.1.1.1 user=ppp1 password=ppp1 disabled=no</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="BCP-winbox-配置"><a href="#BCP-winbox-配置" class="headerlink" title="BCP winbox 配置"></a>BCP winbox 配置</h3><h4 id="Office1-配置-1"><a href="#Office1-配置-1" class="headerlink" title="Office1 配置"></a>Office1 配置</h4><p>在 bridge 中添加一个桥，并设置 rstp:</p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2415.jpg" alt><br>在 port 中， 添加桥接的接口，我们添加 ether1 到 port 用于连接内网： </p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2418.jpg" alt></p>
<p>设置静态的 MAC-address:</p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2420.jpg" alt></p>
<p>分配 IP addresses:</p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2423.jpg" alt></p>
<p>创建 PPP profile，并设置 bridge 参数 </p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2425.jpg" alt></p>
<p>添加 PPP 客户端 </p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2428.jpg" alt></p>
<p>启用 PPTP-server, PPTP 服务器的 MRRU 一定要设置为 1600，否则会导致网页无法打开的情况。 </p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2430.jpg" alt></p>
<hr>
<h4 id="Office2-配置-1"><a href="#Office2-配置-1" class="headerlink" title="Office2 配置"></a>Office2 配置</h4><p>客户端路由器配置相同，只是你需要配置并启用 PPTP 客户端， 添加 PPTP client，同样需要设置 MRRU=1600，然后配置 pptp 拨号信息： </p>
<p><img src="/2016/09/24/BCP%E5%8D%8F%E8%AE%AE/img2433.jpg" alt> </p>
<p>在实际网络应用中，也可以将 vlan 和 ppp 做到一个 bridge 中，通过 vlan 来划分远端桥接的区域，桥接隧道的互联网应用有很多种，特别是互联网企业网络和运营网络涉及较多。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>BCP</tag>
      </tags>
  </entry>
  <entry>
    <title>CN2和BGP哪个好？</title>
    <url>/2020/04/12/CN2%E5%92%8CBGP%E5%93%AA%E4%B8%AA%E5%A5%BD/</url>
    <content><![CDATA[<p>哪个快网必须要说一下，其实CN2和BGP是两个概念：</p>
<ul>
<li><strong>CN2</strong>：CN2是指中国电信的优质线路，CN2出国线路延迟低，高峰时段网络稳定，一般走的是59.43开头的节点；</li>
<li><strong>BGP</strong>：BGP不是线路，它是指边界网关路由协议，比如国内有电信、联通及移动等宽带，BGP协议能够帮助用户寻找最佳的访问路径来提升速度。</li>
</ul>
<p><strong>综上，如何理解CN2和BGP呢？</strong></p>
<ul>
<li><strong>CN2是指线路，对应的是出国的；</strong></li>
<li><strong>BGP是指路由协议，对应的是国内的不同运营商之间的寻址问题。</strong></li>
</ul>
<p>所以如果网站面向国内用户那就选BGP就够了，如果是面向国外那肯定优选CN2线路。 哪个快网建议选择阿里云或者腾讯云这种大厂，宽带独享，国内访问延迟一般可以控制在60ms以内；面向国外，比如阿里云的香港节点，走的就是CN2线路。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>BGP</tag>
        <tag>CN2</tag>
      </tags>
  </entry>
  <entry>
    <title>Mikrotik DNS缓存设置建议</title>
    <url>/2020/07/17/DNS%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h4 id="Miktotik-Router-设置"><a href="#Miktotik-Router-设置" class="headerlink" title="Miktotik Router 设置"></a>Miktotik Router 设置</h4><ol>
<li>首先设置打开mikrotik DNS的缓存功能:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip dns <span class="built_in">set</span> allow-remote-requests=yes</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li>将所有的TCP和UDP的53端口的请求重定向:(如果你只有一个路由可以进行重定向设置)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip firewall nat add chain=dstnat protocol=tcp dst-port=53 action=redirect to-ports=53 comment=<span class="string">"DNS TCP"</span></span><br><span class="line">/ip firewall nat add chain=dstnat protocol=udp dst-port=53 action=redirect to-ports=53 comment=<span class="string">"DNS UDP"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<ol start="3">
<li>设置Fasttrack 使来自路由器的所有DNS流量绕过队列:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip firewall filter add chain=forward protocol=tcp dst-port=53 action=fasttrack-connection comment=<span class="string">"Fasttrack DNS TCP"</span></span><br><span class="line">/ip firewall filter add chain=forward protocol=udp dst-port=53 action=fasttrack-connection comment=<span class="string">"Fasttrack DNS UDP"</span></span><br></pre></td></tr></table></figure>
<img src="/2020/07/17/DNS%E7%BC%93%E5%AD%98/1.png" alt></li>
</ol>
<hr>
<ol start="4">
<li>如果你是通过PPPOE拨号上网的,想自行设置DNS地址,打开PPPOE网口,取消 Use-Peer-DNS</li>
</ol>
<p><img src="/2020/07/17/DNS%E7%BC%93%E5%AD%98/2.png" alt></p>
<ol start="5">
<li>设置 DNS 的服务器地址为 自定义DNS 或 上游运营商的DNS地址-路径:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip dns</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>ps:当同时设置了静态和动态服务器时,静态服务器条目更可取,但是这并不表示将始终使用静态服务器(例如，以前从动态服务器接收查询，但后来添加了静态，那么将首选动态条目)</strong></p>
<ol start="6">
<li>设置DHCP服务器的DNS地址为 自定义DNS 或 上游运营商的DNS地址-路径:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip dhcp</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="删除本地缓存"><a href="#删除本地缓存" class="headerlink" title="删除本地缓存"></a>删除本地缓存</h4><ol>
<li><p>删除电脑上的DNS缓存:</p>
<ul>
<li><p>打开CMD控制台,输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看缓存内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /displaydns</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除浏览器DNS缓存:</p>
<ul>
<li>某厂商浏览器:<br>  打开浏览器的选项-高级设置,里面有一个选项是 “清除上网痕迹” - “清空缓存”, 点击 “清除”</li>
<li>chrome浏览器:<br>  设置-隐私设置-清除浏览数据-缓存的图片和文件-清除数据</li>
</ul>
</li>
</ol>
<ol start="3">
<li>刷新 Mikrotik RouterOS 的DNS缓存:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip dns cache flush</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mangle 分类标记介绍</title>
    <url>/2016/09/27/Mangle%E5%88%86%E7%B1%BB%E6%A0%87%E8%AE%B0%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>mangle 允许对 IP 数据包做特殊的标记， mangle 是通过修改指定的 IP 数据包头字段，去标记 IP 数据包的特征 能标记端口、 IP、协议、 TCP 协议和相应的 IP 数据流。 Mangle 属于综合性功能，所以在路由、流量控制和其他相应功能中都会涉及到。 </p>
<p>需要功能包: system<br>需要等级: Level1<br>操作路径: /ip firewall mangle<br>协议标准: IP</p>
<h2 id="Mangle-介绍"><a href="#Mangle-介绍" class="headerlink" title="Mangle 介绍"></a>Mangle 介绍</h2><p>Mangle 是一种标记器，标记特殊的数据包等待将来处理。在 RouterOS 中许多其他的功能组件会使用到他，如queue-trees 和 nat，他们识别到一个数据包了标记的便会做相应的处理。 Mangle 标记仅存在于该路由器中，他们无法传输到网络中去。 根据数据传输方式不同可以选择：</p>
<a id="more"></a>
<ul>
<li><strong>Prerouting：路由前，常用于标记策略和端口路由</strong></li>
<li><strong>Input：进入路由器的数据</strong></li>
<li><strong>Foreward：通过路由转发，用于修改 TTL、 TCP-MSS 和流量控制规则</strong></li>
<li><strong>Output：数据输出</strong></li>
<li><strong>Prostrouting：路由后</strong></li>
</ul>
<p>RouterOS 中的 IP firewall 主要由 3 个规则部分组成 Mangle、 Filter、 NAT ，而 Address-list 常用于地址列表分类。 Mangle 通过标记特定的 IP 数据流后，为 Filter、 NAT 和、路由、 Queue 提供标记后的 IP 数据流</p>
<p> <img src="/2016/09/27/Mangle%E5%88%86%E7%B1%BB%E6%A0%87%E8%AE%B0%E4%BB%8B%E7%BB%8D/img2719.jpg" alt></p>
<p>  标记 IP 数据流的三种类型，这三种类型会在各种应用中多次出现，特别是 Queue 的流量控制和 ip route 的路由：</p>
<ul>
<li><strong>Mark-connection：标记所有 IP 流的连接</strong></li>
<li><strong>Mark-packet：标记 IP 流中数据包</strong></li>
<li><strong>Mark-routing：标记 IP 流中 IP 数据包的路由信息</strong></li>
</ul>
<p>三种类型的关系，所有的在 IP 数据包传输前，首先需要通过建立 TCP/UDP 连接，进行传输。所以当数据通过 IP 流进入 Mangle 后，建立相应的连接标记，并从连接标记中提取数据包，做处理。图示如下：<br>  <img src="/2016/09/27/Mangle%E5%88%86%E7%B1%BB%E6%A0%87%E8%AE%B0%E4%BB%8B%E7%BB%8D/img2724.jpg" alt></p>
<h2 id="Mangle-应用"><a href="#Mangle-应用" class="headerlink" title="Mangle 应用"></a>Mangle 应用</h2><h3 id="Peer-to-Peer-传输标记"><a href="#Peer-to-Peer-传输标记" class="headerlink" title="Peer-to-Peer 传输标记"></a>Peer-to-Peer 传输标记</h3><p>保证优质的网络连接，如 VoIP 和 HTTP 等为最优先级，将 P2P 的优先级设置为最低 RouterOS QOS 操作首先使用 mangle 标记不同类型的传输，然后把它们放入的 queues 做不同的限制。下面的事例是强迫 P2P 的总的传输不能超过 1Mbps，其他的传输连接则扩大连接带宽和优先级：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@MikroTik] &gt; /ip firewall mangle add chain=forward p2p=all-p2p action=mark-connection new-connection-mark=p2p_conn</span><br><span class="line">[admin@MikroTik] &gt; /ip firewall mangle add chain=forward connection-mark=p2p_conn action=mark-packet new-packet-mark=p2p</span><br><span class="line">[admin@MikroTik] &gt; /ip firewall mangle add chain=forward packet-mark=!p2p_conn action=mark-packet new-packet-mark=other</span><br><span class="line">[admin@MikroTik] &gt; /ip firewall mangle <span class="built_in">print</span></span><br><span class="line">Flags: X - disabled, I - invalid, D - dynamic</span><br><span class="line">0 chain=forward p2p=all-p2p action=mark-connection new-connection-mark=p2p_conn</span><br><span class="line">1 chain=forward connection-mark=p2p_conn action=mark-packet new-packet-mark=p2p</span><br><span class="line">2 chain=forward packet-mark=!p2p_conn action=mark-packet new-packet-mark=other</span><br><span class="line">[admin@MikroTik] &gt;</span><br><span class="line">[admin@MikroTik] &gt; /queue tree add parent=Public packet-mark=p2p <span class="built_in">limit</span>-at=1000000 max-limit=100000000 priority=8</span><br><span class="line">[admin@MikroTik] &gt; /queue tree add parent=Local packet-mark=p2p <span class="built_in">limit</span>-at=1000000 max-limit=100000000 priority=8</span><br><span class="line">[admin@MikroTik] &gt; /queue tree add parent=Public packet-mark=other <span class="built_in">limit</span>-at=1000000 max-limit=100000000 priority=1</span><br><span class="line">[admin@MikroTik] &gt; /queue tree add parent=Local packet-mark=other <span class="built_in">limit</span>-at=1000000 max-limit=100000000 priority=1</span><br></pre></td></tr></table></figure>


<h3 id="Mangle-限制-2-级代理"><a href="#Mangle-限制-2-级代理" class="headerlink" title="Mangle 限制 2 级代理"></a>Mangle 限制 2 级代理</h3><p>通过 mangle 限制 2 级代理， 思路是修改 TTL 值，让路由级数减少， 但对端口的 http 代理无效，进入 forward链表指定 in-interface 或者指定目标数据到内往的 IP 地址，即 dst-address 或 dst-address-list 等参数来修改到达目标的 TTL 值为 1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@MikroTik] /ip firewall mangle&gt; add chain=forward out-interface=lan action=change-ttl new-ttl=<span class="built_in">set</span>:1</span><br><span class="line">[admin@MikroTik] /ip firewall mangle&gt;<span class="built_in">print</span> chain=forward</span><br><span class="line">Flags: X - disabled, I - invalid, D - dynamic</span><br><span class="line">8 chain=forward action=change-ttl new-ttl=<span class="built_in">set</span>:1 out-interface=lan</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>Mangle</tag>
        <tag>标记</tag>
      </tags>
  </entry>
  <entry>
    <title>PPTP、L2TP、IPSec、OpenVPN和SSTP的区别</title>
    <url>/2016/11/08/PPTPL2TPIPSecOpenVPN%E5%92%8CSSTP%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>VPN （虚拟专用网）发展至今已经不在是一个单纯的经过加密的访问隧道，它已经融合了访问控制、传输管理、加密、路由选择、可用性管理等多种功能，并在全球的信息安全体系中发挥着重要的作用。 在网络上，有关各种VPN协议优缺点的比较是仁者见仁，智者见智，很多技术人员由于出于使用目的考虑，包括访问控制、安全和用户简单易用，灵活扩展等各方面，权衡利弊，难以取舍；尤其在VOIP语音环境中，网络安全显得尤为重要，因此现在越来越多的网络电话和语音网关支持VPN协议。 主流的VPN协议有PPTP、L2TP、IPSec、OpenVPN和SSTP，具体区别如下：</p>
<a id="more"></a>
<p><img src="/2016/11/08/PPTPL2TPIPSecOpenVPN%E5%92%8CSSTP%E7%9A%84%E5%8C%BA%E5%88%AB/vpnPprotocolsComparison.png" alt></p>
<h3 id="PPTP"><a href="#PPTP" class="headerlink" title="PPTP"></a>PPTP</h3><p>点对点隧道协议 (PPTP) 是由包括微软和3Com等公司组成的PPTP论坛开发的一种点对点隧道协，基于拨号使用的PPP协议使用PAP或CHAP之类的加密算法，或者使用 Microsoft的点对点加密算法MPPE。其通过跨越基于 TCP/IP 的数据网络创建 VPN 实现了从远程客户端到专用企业服务器之间数据的安全传输。PPTP 支持通过公共网络（例如 Internet）建立按需的、多协议的、虚拟专用网络。PPTP 允许加密 IP 通讯，然后在要跨越公司 IP 网络或公共 IP 网络（如 Internet）发送的 IP 头中对其进行封装。 </p>
<h3 id="L2TP"><a href="#L2TP" class="headerlink" title="L2TP"></a>L2TP</h3><p>第 2 层隧道协议 (L2TP) 是IETF基于L2F （Cisco的第二层转发协议）开发的PPTP的后续版本。是一种工业标准 Internet 隧道协议，其可以为跨越面向数据包的媒体发送点到点协议 (PPP) 框架提供封装。PPTP和L2TP都使用PPP协议对数据进行封装，然后添加附加包头用于数据在互联网络上的传输。PPTP只能在两端点间建立单一隧道。 L2TP支持在两端点间使用多隧道，用户可以针对不同的服务质量创建不同的隧道。L2TP可以提供隧道验证，而PPTP则不支持隧道验证。但是当L2TP 或PPTP与IPSEC共同使用时，可以由IPSEC提供隧道验证，不需要在第2层协议上验证隧道使用L2TP。 PPTP要求互联网络为IP网络。L2TP只要求隧道媒介提供面向数据包的点对点的连接，L2TP可以在IP（使用UDP），桢中继永久虚拟电路（PVCs),X.25虚拟电路（VCs）或ATM VCs网络上使用。</p>
<h3 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h3><p>IPSec 隧道模式隧道是封装、路由与解封装的整个过程。隧道将原始数据包隐藏（或封装）在新的数据包内部。该新的数据包可能会有新的寻址与路由信息，从而使其能够通 过网络传输。隧道与数据保密性结合使用时，在网络上窃听通讯的人将无法获取原始数据包数据（以及原始的源和目标）。封装的数据包到达目的地后，会删除封装，原始数据包头用于将数据包路由到最终目的地。 隧道本身是封装数据经过的逻辑数据路径，对原始的源和目的端，隧道是不可见的，而只能看到网络路径中的点对点连接。连接双方并不关心隧道起点和终点之间的任何路由器、交换机、代理服务器或其他安全网关。将隧道和数据保密性结合使用时，可用于提供VPN。 封装的数据包在网络中的隧道内部传输。在此示例中，该网络是 Internet。网关可以是外部 Internet 与专用网络间的周界网关。周界网关可以是路由器、防火墙、代理服务器或其他安全网关。另外，在专用网络内部可使用两个网关来保护网络中不信任的通讯。 当以隧道模式使用 IPSec 时，其只为 IP 通讯提供封装。使用 IPSec 隧道模式主要是为了与其他不支持 IPSec 上的 L2TP 或 PPTP VPN 隧道技术的路由器、网关或终端系统之间的相互操作。 </p>
<h3 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h3><p>SSL/TLS协议提供了数据私密性、端点验证、信息完整性等特性。SSL/TLS协议由许多子协议组成，其中两个主要的子协议是握手协议和记录协议。握手协议允许服务器和客户端在应用协议传输第一个数据字节以前，彼此确认，协商一种加密算法和密码钥匙。在数据传输期间，记录协议利用握手协议生成的密钥加密和解密后来交换的数据。 </p>
<p>SSL/TLS独立于应用，因此任何一个应用程序都可以享受它的安全性而不必理会执行细节。SSL/TLS置身于网络结构体系的 传输层和应用层之间。此外，SSL/TLS本身就被几乎所有的Web浏览器支持。这意味着客户端不需要为了支持SSL/TLS连接安装额外的软件。这两个特征就是SSL/TLS能应用于VPN的关键点。 </p>
<p>典型的SSL VPN应用如OpenVPN,是一个比较好的开源软件。PPTP主要为那些经常外出移动或家庭办公的用户考虑；而OpenVPN主要是针对企业异地两地总分公司之间的VPN不间断按需连接，例如ERP在企业中的应用。 OpenVPN 允许参与建立VPN的单点使用预设的私钥，第三方证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库，以及SSLv3/TLSv1 协议。OpenVPN能在Linux、xBSD、Mac OS X与Windows 2000/XP上运行。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。 </p>
<p>隧道加密 </p>
<p>OpenVPN使用OpenSSL库加密数据与控制信息：它使用了OpesSSL的加密以及验证功能，意味着，它能够使用任何OpenSSL支持的算法。它提供了可选的数据包HMAC功能以提高连接的安全性。此外，OpenSSL的硬件加速也能提高它的性能。 </p>
<p>验证 </p>
<p>OpenVPN提供了多种身份验证方式，用以确认参与连接双方的身份，包括：预享私钥，第三方证书以及用户名/密码组合。预享密钥最为简单，但同时它只能用于建立点对点的VPN；基于PKI的第三方证书提供了最完善的功能，但是需要额外的精力去维护一个PKI证书体系。OpenVPN2.0后引入了用户名/口令组合的身份验证方式，它可以省略客户端证书，但是仍有一份服务器证书需要被用作加密。 </p>
<p>网络 </p>
<p>OpenVPN所有的通信都基于一个单一的IP端口，默认且推荐使用UDP协议通讯，同时TCP也被支持。OpenVPN连接能通过大多数的代理服务器，并且能够在NAT的环境中很好地工作。服务端具有向客户端“推送”某些网络配置信息的功能，这些信息包括：IP地址、路由设置等。OpenVPN提供了两种虚拟网络接口：通用Tun/Tap驱动，通过它们，可以建立三层IP隧道，或者虚拟二层以太网，后者可以传送任何类型的二层以太网络数据。传送的数据可通过LZO算法压缩。IANA（Internet Assigned Numbers Authority）指定给OpenVPN的官方端口为1194。OpenVPN 2.0以后版本每个进程可以同时管理数个并发的隧道。 </p>
<p>OpenVPN使用通用网络协议（TCP与UDP）的特点使它成为IPsec等协议的理想替代，尤其是在ISP（Internet service provider）过滤某些特定VPN协议的情况下。在选择协议时候，需要注意2个加密隧道之间的网络状况，如有高延迟或者丢包较多的情况下，请选择 TCP协议作为底层协议，UDP协议由于存在无连接和重传机制，导致要隧道上层的协议进行重传，效率非常低下。</p>
<p>安全 </p>
<p>OpenVPN与生俱来便具备了许多安全特性：它在用户空间运行，无须对内核及网络协议栈作修改；初始完毕后以chroot方式运行，放弃root权限；使用mlockall以防止敏感数据交换到磁盘。 OpenVPN通过PKCS#11支持硬件加密标识，如智能卡。</p>
<h3 id="SSTP"><a href="#SSTP" class="headerlink" title="SSTP"></a>SSTP</h3><p>安全套接字隧道协议(Secure Socket Tunneling Protocol，SSTP)是一种VPN隧道的形式，提供了一种通过SSL3.0通道传输PPP或L2TP流量的机制。SSL利用密钥协商提供传输级别的安全性。通过TCP端口443使用SSL，允许SSTP通过几乎所有的防火墙和代理服务器，除了需要身份验证的Web代理。 SSTP可用于Linux、BSD和Windows。MikroTik的RouterOS还包括一个SSTP客户端和服务器端。对于Windows，SSTP仅可用于自Windows Vista SP1之后的系统。 这种SSTP只适用于远程访问，通常不支持站点与站点之间的VPN隧道。RouterOS的版本有没有这样的限制。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>PPTP</tag>
        <tag>IPSec</tag>
        <tag>L2TP</tag>
        <tag>SSTP</tag>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS6.36里的Raw介绍</title>
    <url>/2016/09/27/ROS6.36%E9%87%8C%E7%9A%84Raw%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>操作路径：</p>
<p>/ip firewall raw</p>
<p>Raw 是 RouterOS v6.36 新增的功能属性， firewall Raw 列表允许选择性在 connection tracking 之前绕过或者丢弃数据包，这样能大大降低 CPU 负载。该功能非常有助于防御 DOS 攻击， RAW 列表不能匹配链接状态的跟踪，例如 connection-state 和 L7 协议。 </p>
<p>如下图， Raw 出现在 Prerouting 和 output 链表，并在 connection-tracking 前执行：</p>
<p><img src="/2016/09/27/ROS6.36%E9%87%8C%E7%9A%84Raw%E4%BB%8B%E7%BB%8D/1.jpg" alt></p>
<a id="more"></a>
<p>Raw 目的是对指定的 IP 访问可以不经过连接跟踪（ connection-tracking），有助于减少 CPU 的开销，但对于私有网络做 nat 转换来说， connection-tracking 是必须的，那 Raw 又如何在实际网络应用中发挥作用。例如我们遭到 DDoS 攻击，我们可以通过 Raw 规则关闭掉攻击源 IP 的连接跟踪，使其不再 RouterOS 本地建立连接会话，不予响应，减小 CPU 开销。<br>在 Raw 中有两个链表，分别是 prerouting 和 output:<br><strong>• prerouting</strong> – 用于处理任何进入路由器的数据包<br><strong>• output</strong> – 用于处理数据包源于路由器，并通过其中一个接口离开，即由路由器自身发出的数据包<br>例如:我们遭到 11.22.33.4 的 IP 通过 syn 的 DDoS 攻击，我们可以拒绝对该 IP 做链接跟踪，减少 CPU 开销 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[rosjb@MikroTik] &gt;/ip firewall raw</span><br><span class="line">[rosjb@MikroTik] /ip firewall raw&gt;add chain=prerouting src-address=11.22.33.4 action=notrack</span><br></pre></td></tr></table></figure>

<p>另一种情况， 如较大的网络环境，涉及内网和外网请求，在访问外网时需要做 nat 转换，而内网则不需要，因此流量和会话增加的情况下，避免 CPU 负载过高，可以通过 Raw 关闭掉访问内网的连接跟踪。<br>例如，在一个大型网络，内网 IP 地址段是 192.168.0.0/16，关闭掉内网的连接跟踪，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[rosjb@MikroTik] &gt;/ip firewall raw</span><br><span class="line">[rosjb@MikroTik] /ip firewall raw&gt;add chain=prerouting dst-address=192.168.0.0/16 action=notrack</span><br></pre></td></tr></table></figure>

<p>这样配置后，我们在 connection-tracking 列表将不会看到内网访问 192.168.0.0/16 的连接会话条目</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>Raw</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS启用设置UPNP功能</title>
    <url>/2016/09/21/ROS%E5%90%AF%E7%94%A8%E8%AE%BE%E7%BD%AEUPNP%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h4 id="关于UPNP微软官方的解释是："><a href="#关于UPNP微软官方的解释是：" class="headerlink" title="关于UPNP微软官方的解释是："></a>关于UPNP微软官方的解释是：</h4><p>UPNP：通用即插即用 (UPNP) 是一种用于 PC 机和智能设备（或仪器）的常见对等网络连接的体系结构，尤其是在家庭中。UPNP 以 Internet 标准和技术（例如 TCP/IP、HTTP 和 XML）为基础，使这样的设备彼此可自动连接和协同工作，从而使网络（尤其是家庭网络）对更多的人成为可能. 简单的说：UPNP能够打通内网与路由之间的完全映射关系，MPT通过UPNP设备与路由之间架设直一条互通的桥梁，使得MPT能获取更多的外网资源，最大限度的提高软件的下载速度. </p>
<a id="more"></a>
<h4 id="一、实现UPNP必须满足哪些条件"><a href="#一、实现UPNP必须满足哪些条件" class="headerlink" title="一、实现UPNP必须满足哪些条件?"></a>一、实现UPNP必须满足哪些条件?</h4><p>A. Modem/路由/防火墙设备必须支持UPNP功能：<br>是否具备此功能可查阅说明书或者直接咨询厂家。一般来讲，Modem还必须同时支持路由功能，除非你配备了单独的路由器或者代理服务器；<br>软路由都支持UPNP功能,个别硬件路由不支持此功能. </p>
<p>B. 操作系统的支持:<br>微软官方只有windows xp系统才支持UPNP功能，官方网站提到从WinMe开始就支持UPNP了，但我相信大家不会使用WinMe来做服务器吧, 所以我们制作了一个win2003下支持UPNP的补丁， 在 win2003 企业版 sp1 下测试通过，具体的安装细语请留意安装前提示信息, 服务器安装完UPNP，必须重启才生效. </p>
<p>C. 软件支持UPNP功能：<br>注意：以上3个条件必须同时满足，缺一不可，否则你只能考虑进行手动端口映射了, 手工端口映射的效果只能有30%的有效率；下面详细介绍一下开启UPNP方面的细节工作. </p>
<h4 id="二、开启路由UPNP功能"><a href="#二、开启路由UPNP功能" class="headerlink" title="二、开启路由UPNP功能."></a>二、开启路由UPNP功能.</h4><p>1、Winbox—-IP—UPnP—-UPnP Settings—-Enabled，如图： </p>
<p><img src="/2016/09/21/ROS%E5%90%AF%E7%94%A8%E8%AE%BE%E7%BD%AEUPNP%E5%8A%9F%E8%83%BD/1.png" alt><br>2、Winbox—-IP—UPnP—-添加，如图： </p>
<p><img src="/2016/09/21/ROS%E5%90%AF%E7%94%A8%E8%AE%BE%E7%BD%AEUPNP%E5%8A%9F%E8%83%BD/2.png" alt><br><img src="/2016/09/21/ROS%E5%90%AF%E7%94%A8%E8%AE%BE%E7%BD%AEUPNP%E5%8A%9F%E8%83%BD/3.png" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>upnp</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS用户管理(usermanager)中文版/汉化</title>
    <url>/2016/01/24/ROS%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(usermanager)%E4%B8%AD%E6%96%87%E7%89%88/</url>
    <content><![CDATA[<h3 id="汉化后截图："><a href="#汉化后截图：" class="headerlink" title="汉化后截图："></a>汉化后截图：</h3><p><img src="/2016/01/24/ROS%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(usermanager)%E4%B8%AD%E6%96%87%E7%89%88/2.jpg" alt></p>
<a id="more"></a>

<p><img src="/2016/01/24/ROS%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(usermanager)%E4%B8%AD%E6%96%87%E7%89%88/1.jpg" alt></p>
<h3 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h3><p>1.下载 <a href="https://wwa.lanzous.com/iBvandy3e4d" target="_blank" rel="noopener">zh_CN.rar</a> 解压为 zh_cn.lng文件(5.x和6.x版本都有,5.x是网络上流传的,6.x部分细节内容稍许自己翻译了下) </p>
<p>2.通过winbox将文件拖拽上传至Files:<br><img src="/2016/01/24/ROS%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(usermanager)%E4%B8%AD%E6%96%87%E7%89%88/4.jpg" alt></p>
<p>3.登陆userman原版，左下角选择语言版本即可：<br><img src="/2016/01/24/ROS%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(usermanager)%E4%B8%AD%E6%96%87%E7%89%88/3.jpg" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>userman</tag>
        <tag>usermanager</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS电信,网通双ISP,光纤,ADSL双类型线路,某小区运营配置实例</title>
    <url>/2016/09/26/ROS%E7%94%B5%E4%BF%A1,%E7%BD%91%E9%80%9A%E5%8F%8CISP,%E5%85%89%E7%BA%A4,ADSL%E5%8F%8C%E7%B1%BB%E5%9E%8B%E7%BA%BF%E8%B7%AF,%E6%9F%90%E5%B0%8F%E5%8C%BA%E8%BF%90%E8%90%A5%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>这个小区本来只有一条网通的20M光纤资源,但用户量猛增,带宽不够用了,老板商量着要加带宽.本来让加网通的资源,这样好做资源的整合,但当地网通光纤价格高,而电信的相对便宜些,最后决定还是用电信的光纤,外加了一条网通的ADSL.  </p>
<p>于是网络的整体网络资源如下: </p>
<p><strong>联通专线 20M/20M(下载/上传)</strong><br><strong>电信专线 20M/20M(下载/上传)</strong><br><strong>联通ADSL 20M/2M(下载/上传)</strong></p>
<a id="more"></a>
<p>由于原来已经有大量用户,及已经在/ppp profile配置好的用户流量套餐及用户分配的IP段和网通的DNS信息,考虑到做最少的修改及开用户的方便 ,最终决定 如下的策略配置 </p>
<p>对用户流量按源IP进行分流,分流策略如下 </p>
<p>1/3 的用户走电信光纤线路,对这部分做地址列表进行策略配置,由于已经分配给了用户的DNS是网通的DNS,所以在NAT里将网通的DNS地址转       换成电信的DNS . </p>
<p>2/3 用户走网通线路,这部分用户的80,443,8080的TCP流量走网通ADSL,其它部分流量直接走网通光纤. </p>
<p>以上分配方案的优点是 </p>
<ol>
<li>不用更改原来的套餐情况,不用加多PPPOE服务器,开户时不用指定用户走的线路,原来的套餐可以继续使用 </li>
<li>用分流而不用叠加,可以解决由于DNS解析引起一些网站打开速度慢或者打不开的情况 </li>
<li>电信的DNS解析采用NAT转换可以给用户配置统一的DNS,方便管理 </li>
</ol>
<p>具体配置如下: </p>
<h3 id="一-添加电信分流IP的地址列表及所有用户的地址列表-我用的是118-118-118-0-24段的IP"><a href="#一-添加电信分流IP的地址列表及所有用户的地址列表-我用的是118-118-118-0-24段的IP" class="headerlink" title="一  添加电信分流IP的地址列表及所有用户的地址列表(我用的是118.118.118.0/24段的IP)"></a>一  添加电信分流IP的地址列表及所有用户的地址列表(我用的是118.118.118.0/24段的IP)</h3><p><img src="/2016/09/26/ROS%E7%94%B5%E4%BF%A1,%E7%BD%91%E9%80%9A%E5%8F%8CISP,%E5%85%89%E7%BA%A4,ADSL%E5%8F%8C%E7%B1%BB%E5%9E%8B%E7%BA%BF%E8%B7%AF,%E6%9F%90%E5%B0%8F%E5%8C%BA%E8%BF%90%E8%90%A5%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/201411171416202473663363.png" alt></p>
<h3 id="二-路由标记如下"><a href="#二-路由标记如下" class="headerlink" title="二  路由标记如下"></a>二  路由标记如下</h3><p><img src="/2016/09/26/ROS%E7%94%B5%E4%BF%A1,%E7%BD%91%E9%80%9A%E5%8F%8CISP,%E5%85%89%E7%BA%A4,ADSL%E5%8F%8C%E7%B1%BB%E5%9E%8B%E7%BA%BF%E8%B7%AF,%E6%9F%90%E5%B0%8F%E5%8C%BA%E8%BF%90%E8%90%A5%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/201411171416202748334275.png" alt></p>
<p>在  顺序1-顺序2-顺序3  3条规则的顺序不能更改,下面对三条规则简单说明 顺序1 ,标记的走向电信的路由,   这里passthrough选的是no,结合上下文选 YES也不会有问题 顺序2,标记走向网通的路由流量,这里PASSTHROUTH需要选YES,以便第三条规则分离走走ADSL的流量,选 NO的话就不会有走ADSL的流量了. 顺序3,根据目标TCP端口从走网通的那部分流量中(routing-mark=r_Cns限定从走网通的流量中分流 )分流出走ADSL线路的流量,这里passthrough写的是NO,因为下面有其它的标记,防止标记被更改 </p>
<h3 id="三-NAT转发如下"><a href="#三-NAT转发如下" class="headerlink" title="三  NAT转发如下"></a>三  NAT转发如下</h3><p><img src="/2016/09/26/ROS%E7%94%B5%E4%BF%A1,%E7%BD%91%E9%80%9A%E5%8F%8CISP,%E5%85%89%E7%BA%A4,ADSL%E5%8F%8C%E7%B1%BB%E5%9E%8B%E7%BA%BF%E8%B7%AF,%E6%9F%90%E5%B0%8F%E5%8C%BA%E8%BF%90%E8%90%A5%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/201411171416203212308078.png" alt> </p>
<p>这里主要需要了解的是把网通的DNS做DST-NAT到电信的DNS上,电信的PPPOE用户解析IP时,表面上是到网通的DNS解析,实际上还是在电信的DNS解析的IP </p>
<p>命令添加如下 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip firewall nat add  chain=dstnat action=dst-nat to-addresses=2.2.2.2(电信DNS) protocol=udp src-address=1.1.1.1(网通DNS) dst-address-list=cncDNS</span><br></pre></td></tr></table></figure>
<h3 id="四-在-ip-route里分配路由流量到三条线路"><a href="#四-在-ip-route里分配路由流量到三条线路" class="headerlink" title="四 在/ip route里分配路由流量到三条线路"></a>四 在/ip route里分配路由流量到三条线路</h3><p>其中网通的线路做了默认路由,所以之前的路由标记r_Cnc没有在这里体现出来</p>
<p>电信的路由标记r_Tel走了电信的线路wan-Tel</p>
<p>ADSL的路由标记r_Cnc_adsl从网通的ADSL线路走出</p>
<p>默认流量走网通光纤</p>
<p><img src="/2016/09/26/ROS%E7%94%B5%E4%BF%A1,%E7%BD%91%E9%80%9A%E5%8F%8CISP,%E5%85%89%E7%BA%A4,ADSL%E5%8F%8C%E7%B1%BB%E5%9E%8B%E7%BA%BF%E8%B7%AF,%E6%9F%90%E5%B0%8F%E5%8C%BA%E8%BF%90%E8%90%A5%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/201411171416203716103797.png" alt> </p>
<h3 id="五-接口流量效果"><a href="#五-接口流量效果" class="headerlink" title="五 接口流量效果"></a>五 接口流量效果</h3><p><img src="/2016/09/26/ROS%E7%94%B5%E4%BF%A1,%E7%BD%91%E9%80%9A%E5%8F%8CISP,%E5%85%89%E7%BA%A4,ADSL%E5%8F%8C%E7%B1%BB%E5%9E%8B%E7%BA%BF%E8%B7%AF,%E6%9F%90%E5%B0%8F%E5%8C%BA%E8%BF%90%E8%90%A5%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/201411171416203932317580.png" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>adsl</tag>
        <tag>光纤</tag>
        <tag>小区</tag>
        <tag>电信</tag>
        <tag>网通</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS的流控原理</title>
    <url>/2016/09/25/ROS%E7%9A%84%E6%B5%81%E6%8E%A7%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>Queue 流控用于对网络接口数据流发送和接收数据进行控制。传输流量被控制在指定的范围值内， 即传输的流量只能小于或等于这个值， 反之超过的流量将会被丢弃或延迟发送。</p>
<hr>
<p><strong>流控执行两种方式：</strong> </p>
<ul>
<li>丢弃所有超出的流量限制的数据包– <strong>rate limiting</strong> (丢弃或整形流量) ，当 queue-size=0 100%流量被限制</li>
<li>延迟发送超出指定流量限制加入到队列中的数据– <strong>rate equalizing</strong> (计划任务) ，当 queue-size=无限制（ unlimited） 100%比例均衡发送<br>下面的视图让你进一步理解 <strong>rate limiting</strong> 和 <strong>rate equalizing</strong> 的区别：<br><img src="/2016/09/25/ROS%E7%9A%84%E6%B5%81%E6%8E%A7%E5%8E%9F%E7%90%86/1.jpg" alt><a id="more"></a>
上图显示了所有传输流量超出了指定带宽的那部分被直接丢弃掉。<br><img src="/2016/09/25/ROS%E7%9A%84%E6%B5%81%E6%8E%A7%E5%8E%9F%E7%90%86/2.jpg" alt></li>
</ul>
<p>上图显示了当传输流量超出了指定带宽的那部分，将进入队列容器（ queue-size） 并延迟发送。注意：数据包被延迟只会在队列容器没有满的情况下，如果队列容器没有多余的空间缓存数据包，数据包同样会被丢弃。 在 RouterOS 队列容器可以通过/queue type 指定，每种类型的 queue type 有不同的队列长度大小，可以指定数据包和字节 (pfifo-limit, bfifo-limit, pcq-limit, pcq-total-limit, red-limit), 但所有的类型原则上是一样的，即 queue-size 决定数据包是被丢弃还是延迟发送。<br><img src="/2016/09/25/ROS%E7%9A%84%E6%B5%81%E6%8E%A7%E5%8E%9F%E7%90%86/3.jpg" alt></p>
<p><strong>每个队列都有</strong> <strong>2</strong> <strong>个速率限制：</strong><br><strong>CIR</strong> (约定信息速率 Committed Information Rate) – (在 RouterOS 中的参数为 limit-at) 最坏的情况下，无论如何都会将得到给定的的 CIR 传输量(假设我们能发送那么多的数据量)。<br><strong>MIR</strong> (最大信息速率 Maximal Information Rate) – (在 RouterOS 中的参数为 max-limit) 最好的情况下，如果有剩余带宽， 才能获得这个的带宽。 </p>
<p>队列执行在 RouterOS 基于等级令牌桶 Hierarchical Token Bucket (HTB)， HTB 允许创建等级队列结构并能指定队列直接的关系，在 RouterOS v6.0 之前等级结构能被指定在 4 个不同的位置</p>
<ul>
<li><strong>global-in</strong> - 代表了所有输入接口(INGRESS 队列)。请注意在数据包过滤前与 global-in 相关的队列应用到路由器接的数据流。 global-in 排序就是在 mangle 和 dst-nat 之后执行。</li>
<li><strong>global-out</strong> - 代表了所有普通的输出接口。附属于它的队列会在附属于特定接口的队列之前应用。</li>
<li><strong>global-total</strong> - 表了一个流经路由器的数据都能通过的虚拟接口。当把一个 qdisc 附属到 global-total时，限制需要在两个方向起作用。例如，如果我们设置一个为 total-max-limit 256000 限制，我们将得到 upload+download=256kbps(最大值)</li>
</ul>
<p><strong>interface name</strong> - 明确指定的网络接口，在流量从这个接口发送出去时将被放入 HTB 队列 </p>
<p><strong>注意 v6.0 后取消了 global-in 和 global-out 接口，使用 global</strong> <strong>代替。</strong></p>
<p><strong>RouterOS</strong> <strong>中有两种方式配置队列：</strong><br><strong>/queue simple</strong> – 用于简单的队列配置，如直接对单个用户的上下行带宽控制，队列的时间计划任务。<br><strong>/queue tree</strong> – 为执行高级的队列任务，如全局的优先策略，用户组带宽控制，需从/ip firewall mangle标记数据包中调用。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>queue simple</tag>
        <tag>queue tree</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS里的IPSec配置</title>
    <url>/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>适用于ROS版本号 &lt; 6.16 的用户</strong></p>
<p>IPSec 作为新一代网络安全协议，为网络传输提供了安全保证，使端到端的数据保密成为可能， 是互联网上的新一代安全标准。提供包括访问控制、无连接的完整性、数据源认证、抗重放 (replay)保护、保密和有限传输保密性在内的服务，服务基于 IP 层并对 IP 及上层协议进行保护。服务的实施通过两种通信安全协议：认证头（ AH）和封装安全负载（ ESP）以及 Internet 密钥交换（ IKE）协议来达到这些目标。 IPSec AH 协议提供数据源认证、无连接的完整性和可选的抗重放服务。 ESP 协议提供数据保密性，有限的数据流保密性、数据源认证、无连接的完整性及抗重放服务。 IKE 协议用于协商 AH 和 ESP 协议所使用的密码算法，并将算法所需的必备密钥放在合适的位置。 IPSec 有两种模式：传输模式和隧道模式。它们都是对外出的数据包添加 IPSec 头进行加密和认证，而对于接收的 IPSec 数据包作解密认证处理和适当的转发传送。</p>
<a id="more"></a>
<hr>
<h3 id="IPSec-点对点配置实例"><a href="#IPSec-点对点配置实例" class="headerlink" title="IPSec 点对点配置实例"></a>IPSec 点对点配置实例</h3><p>以下是一个使用 RouterOS 建立的 IPsec VPN 案例， 网络拓扑图： </p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/1.jpg" alt></p>
<p>192.168.89.1/24 <strong>–R1–</strong> 192.168.11.11/24 <strong>—互联网—</strong> 192.168.11.18/24 <strong>—R2—</strong> 192.168.90.1/24</p>
<p><strong>R1 配置</strong></p>
<p>进入 ip address 添加各接口的 IP 地址，先配置内网接口地址:<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/2.jpg" alt></p>
<p>添加 ether1-wan 互联接口地址：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/3.jpg" alt></p>
<p>进入 ip routes 里面添加网关出口：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/4.jpg" alt></p>
<p>进入 ip ipsec 里的 policies 选项，先在 general 添加内网的源地址和对端网络的内网地址。<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/5.jpg" alt></p>
<p>选择 action 选项里面添加源外网地址和对端外网地址和开启 tunnel 隧道协议<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/6.jpg" alt></p>
<p>进入在 ip ipsec 里的 peers 标签里添加目标外网 ip 地址和 secert 密码：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/7.jpg" alt></p>
<p>在 ip firewall 里的 nat， 建立一条 srcnat 规则为 accept，接受源内网地址和对端内网地址通过：</p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/8.jpg" alt></p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/9.jpg" alt></p>
<p>然后建立将本地内网隐藏上网的 masquerade 规则： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip firewall nat add src-address=192.168.89.0/24 action=masquerade</span><br></pre></td></tr></table></figure>
<p>以上就是 R1 的相应配置过程， R1 已经配置完成现在就 R2 了。</p>
<hr>
<h3 id="R2-配置"><a href="#R2-配置" class="headerlink" title="R2 配置"></a>R2 配置</h3><p>进入 ip address 添加 ether2-lan 内网接口地址:<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/10.jpg" alt></p>
<p>添加 ether1-wan 外网接口地址：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/11.jpg" alt></p>
<p>进入 ip routes 添加外网网关：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/12.jpg" alt></p>
<p>进入 ip ipsec 里的 policies 选项，先在 general 添加内网的源地址和对端网络的内网地址。<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/13.jpg" alt></p>
<p>选择 action 选项里面添加源外网地址和对端外网地址和开启 tunnel 隧道协议<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/14.jpg" alt></p>
<p>再在 ip ipsec 里的 peers 标签里添加对端外网 ip 地址和 secert 密码：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/15.jpg" alt></p>
<p>在 ip firewall 里的 nat， 建立一条 srcnat 规则为 accept，接受源内网地址和对端内网地址通过：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/16.jpg" alt></p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/17.jpg" alt><br>然后建立将本地内网隐藏上网的 masquerade 规则： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip firewall nat add src-address=192.168.90.0/24 action=masquerade</span><br></pre></td></tr></table></figure>
<p>以上就是 R2 的配置过程。 注： NAT 规则的配置的上下顺序， accept 规则需在 masquerade 伪装规则前：<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/18.jpg" alt></p>
<hr>
<h3 id="Windows-L2TP-IPsec-连接"><a href="#Windows-L2TP-IPsec-连接" class="headerlink" title="Windows L2TP/IPsec 连接"></a>Windows L2TP/IPsec 连接</h3><p>Microsoft Windows XP/Vista/win7 内建了 PPTP 客户端和和 L2TP/IPSec 客户端。 PPTP 链接是不要 IPsec 加密的，而 windows 的 L2TP/IPsec 默认要求建立 IPsec 链接后，才能进行 L2TP 的拨号连接，这样的解决方法在早期采用的是修改 windows 的注册表，将 windows 默认的 IPsec 连接值修改并关闭， 相对于终端客户操作繁琐，且安全性降低。为了能正常让 windows 的 L2TP/IPsec 与 RouterOS 连接，我们可以配置 RouterOS 启用 IPsec。 Windows 建立 L2TP/IPSec 连接，首先要求连接到对端的 IPSes，在 IPSec 建立完成后在允许 L2TP 连接，也就是 IPSec 连接在先， L2TP 其后，所以我们首先配置 IPSec 连接。<br><font color="red">注： RouterOS 6.16 在 L2TP 服务配置中加入了 IPsec 选项，简化了 IPsec 的配置。</font><br>我们先确定一下网络结构： </p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/19.jpg" alt></p>
<p>这里 RouterOS 的 IP 地址是 10.200.15.228，两台 PC 的 IP 地址分别是 10.200.15.59,和 10.200.15.60。两台 PC的 IP 地址必须是固定，以便 IPsec 连接成功。在这个拓扑图里要求所有的地址是能被访问到的，即非 nat 转换的地址（也非 L2TP 隧道分配的 IP 地址）。</p>
<h3 id="IPSec-配置"><a href="#IPSec-配置" class="headerlink" title="IPSec 配置"></a>IPSec 配置</h3><p>首先要将 IPsec 指向对端的 windows PC 的 IP 地址（非 L2TP 分配 IP 地址） ，进入/ip ipsec 菜单下（确定安装security 功能包），选择 peer 标签，设置 address 为 PC 的 IP 地址， secret 设置共享密钥 yusong， Hash-algorithm选择 sha， generate-policy 勾上，其他默认。<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/20.jpg" alt></p>
<p>添加 10.200.15.60 的 peer 规则 </p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/21.jpg" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip ipsec peer add address=10.200.15.59:500 auth-method=pre-shared-key \</span><br><span class="line">secret=yusong <span class="built_in">hash</span>-algorithm=sha enc-algorithm=3des generate-policy=yes</span><br><span class="line">/ip ipsec peer add address=10.200.15.60:500 auth-method=pre-shared-key \</span><br><span class="line">secret=yusong <span class="built_in">hash</span>-algorithm=sha enc-algorithm=3des generate-policy=yes</span><br></pre></td></tr></table></figure>

<p><strong>添加 IPSec peer 设置</strong><br>o address=10.200.15.59 是你的 windows 电脑的网卡实际地址。<br>o :500 端口号;<br>o hash-algorithm=sha 和 enc-algorithm=3des 是 windows 上的默认配置；<br>o generate-policy=yes 自动产生 IPSec 策略 </p>
<p><strong>RouterOS 配置</strong> </p>
<p>首先我们配置 RouterOS 的 L2TP 服务器，这个配置和普通的 PPTP 配置一样， 在 PPP 里启用 L2TP 服务 </p>
<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/22.jpg" alt></p>
<p>命令行配置，记住这里的路径不同： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ interface l2tp-server server <span class="built_in">set</span> enabled=yes</span><br></pre></td></tr></table></figure>

<p><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/23.jpg" alt></p>
<p>进入 ip pool 设置分配给用户的地址池：  命令操作如下： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip pool add name=L2TP ranges=192.168.10.2-192.168.10.254</span><br></pre></td></tr></table></figure>

<p>进入/ppp profile 配置 default-encryption 的规则:<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/24.jpg" alt></p>
<p>DNS 和 limit 选项里的 rate-limit、 only one 参数根据需要设置，这里就不多讲解。 命令行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ppp profile&gt; <span class="built_in">set</span> 1 <span class="built_in">local</span>-address=192.168.10.1 remote-address=L2TP</span><br></pre></td></tr></table></figure>

<p>进入/ppp secret 添加用户账号 命令行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ ppp secret add name=123 password=123 profile=default-encryption</span><br></pre></td></tr></table></figure>
<p>到这里 L2TP 服务器配置完成。</p>
<hr>
<h3 id="Windows-配置"><a href="#Windows-配置" class="headerlink" title="Windows 配置"></a>Windows 配置</h3><p>Windows 配置包含 2 个部分，第一个部分添加新的网络连接，第二个部分调整 IPSec 设置 Win7 配置步骤：</p>
<ul>
<li>点开始菜单; </li>
<li>控制面板\网络和 Internet\网络和共享中心 </li>
<li>设置新的连接或网络; </li>
<li>添加一个 VPN 连接， </li>
<li>目的地的主机或域名填写 10.200.15.228（具体操作跟着步骤走，不详细说明）</li>
</ul>
<p>接下来我们需要配置 VPN 连接的属性<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/25.jpg" alt></p>
<p>确定主机地址是 10.200.15.228<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/26.jpg" alt></p>
<p>选择 VPN 类型为使用 ipsec 的第 2 层隧道协议（ L2TP/IPSec）<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/27.jpg" alt></p>
<p>选择高级设置，并设置使用预共享的密钥作身份验证：输入相同的密钥： yusong<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/28.jpg" alt></p>
<p>配置完成后，输入账号 123，密码 123，连接<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/29.jpg" alt></p>
<p>连接完成后，在 remote peers 可以看到连接的 IP 地址<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/30.jpg" alt></p>
<p>Policies 策略会被自动添加<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/31.jpg" alt></p>
<p>Installed SAs 状态，注意当你的 L2TP 注销后，可能会出现 Installed SAs 状态没有清楚，第二次重播可能需要使用 Flush 清空状态<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/32.jpg" alt></p>
<p>PPP 里的 active 状态<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/33.jpg" alt></p>
<hr>
<h3 id="v6-16-后简化-L2TP-IPsec-配置"><a href="#v6-16-后简化-L2TP-IPsec-配置" class="headerlink" title="v6.16 后简化 L2TP/IPsec 配置"></a>v6.16 后简化 L2TP/IPsec 配置</h3><p>在 RouterOS 6.16 版本开始， L2TP 服务增加了 use IPsce 选项，可以直接在 L2TP 服务配置菜单下设置 IPsec，共享密钥设置后，会自动添加到 IPsec 配置中，简化了管理员操作，当然 RouterOS 必须同时安装 PPP 和 Security功能包<br><img src="/2016/09/27/ROS%E9%87%8C%E7%9A%84IPSec%E9%85%8D%E7%BD%AE/34.jpg" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>IPSec</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS的队列类型(Queue Type)</title>
    <url>/2016/09/25/ROS%E7%9A%84%E9%98%9F%E5%88%97%E7%B1%BB%E5%9E%8B(Queue%20Type)/</url>
    <content><![CDATA[<p>操作路径:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/queue <span class="built_in">type</span></span><br></pre></td></tr></table></figure>

<p>在这个子目录你可以创建自己的客户队列类型。之后，将可以在 <strong>/queue tree</strong>，<strong>/queue simple</strong> 或 <strong>/queue interface</strong> 使用了 </p>
<h3 id="PFIFO-及-BFIFO"><a href="#PFIFO-及-BFIFO" class="headerlink" title="PFIFO 及 BFIFO"></a>PFIFO 及 BFIFO</h3><p>这些队列规则是基于先进先出算法的(FIFO： First-In First-Out)。 PFIFO 和 BFIFO 的区别在于一个是以数据包为单位衡量的，而另一个是以字节为单位。其中只有一个叫做 pfifo-limit (bfifo-limit)的参数，它是用来定义一个 FIFO 队列可以容纳多少数据的。每一个不能排队（如果队列满了）的包都要被丢弃，队列长度过大会增加执行时间</p>
<a id="more"></a>

<p><img src="/2016/09/25/ROS%E7%9A%84%E9%98%9F%E5%88%97%E7%B1%BB%E5%9E%8B(Queue%20Type)/img1943.jpg" alt></p>
<p>如果你的连接不拥塞的话，建议使用 FIFO 队列规则。</p>
<hr>
<h3 id="SFQ"><a href="#SFQ" class="headerlink" title="SFQ:"></a>SFQ:</h3><p>随机公平排序（ SFQ）不会一开始就对流量限制。它的主旨是当你的连接完全满的时候均衡业务流（ TCP 会话或者 UDP 流）。 SFQ 的公平性是由散列法和 round-robin 算法保证的。散列算法把会话流分成一个有限数量的子队列。在sfq-perturb 时间之后散列算法改变并划分会话流为其他子队列。 Round-robin 算法把从每个子队列的pcq-allot 字节按照顺序出队列。 </p>
<p><img src="/2016/09/25/ROS%E7%9A%84%E9%98%9F%E5%88%97%E7%B1%BB%E5%9E%8B(Queue%20Type)/img1945.jpg" alt></p>
<p>整个 SFQ 队列可以容纳 128 个数据包并且对这些包有 1024 个子队列可用。对拥挤的连接使用 SFQ 可以保证一些连接不至于空等待（ starve）。</p>
<hr>
<h3 id="PCQ"><a href="#PCQ" class="headerlink" title="PCQ:"></a>PCQ:</h3><p>为了解决 SFQ 的不完美，每次连接排序 Per Connection Queuing (PCQ)便产生了。它是唯一一种能限流的无等级排序类型。它是一种去掉了随机特性的进化版 SFQ。 PCQ 也会根据 pcq-classifier 参数产生子队列。每个子队列都有一个 pcq-rate 的数据率限制和 pcq-limit 大小的数据包。 PCQ 队列的总大小不能大于pcq-total-limit 包。 以下实例说明了 PCQ 对数据包的用法，以它们的源地址分类。</p>
<p><img src="/2016/09/25/ROS%E7%9A%84%E9%98%9F%E5%88%97%E7%B1%BB%E5%9E%8B(Queue%20Type)/img1946.jpg" alt></p>
<p>如果你以 src-address 对包分类那么所有带有不同源 IP 地址的包将被集合在不同的子队列中。现在你可以使用 pcq-rate 参数对每一个子队列进行限制或均衡。或许最重要的部分是决定我们到底应该把这个队列附属到哪个接口上。如果我们把它依附在本地接口上，那么所有来自公网接口的数据流都将以 src-address（很可能这不是我们想要的）地址分组；相反地如果我们把它依附到公共接口，所有来自我们客户的数据都会以 src-address分组——于是我们可以很容易的限制或者均衡客户的上载。 用 pcq-classifier 分类后为了在子队列中均衡速率，设置 pcq-rate 为 0 几乎不用管理， PCQ 也可以用来对多用户动态均衡或者形成流量，</p>
<hr>
<h3 id="RED"><a href="#RED" class="headerlink" title="RED:"></a>RED:</h3><p>随机早先探测（ RED）是一种通过控制平均队列长度避免网络拥塞的排序机制。当平均队列长度达到red-min-threshold 时， RED 随机选择该丢弃哪个包。当平均队列长度变长时，堆砌多少包数的可能性会增加。如果平均队列长度达到 red-max-threshold， 则丢弃该包。尽管如此，也存在真实队列长度（非平均的）远大于 red-max-threshold 时，丢弃所有超过 red-limit 的数据包的情况。 </p>
<p><img src="/2016/09/25/ROS%E7%9A%84%E9%98%9F%E5%88%97%E7%B1%BB%E5%9E%8B(Queue%20Type)/img1955.jpg" alt></p>
<p><strong>注： RED 应用在高数据率的拥挤的连接上，它在 TCP 协议上工作的很好，但在 UDP 上就没那么理想了。</strong>  </p>
<table>
<thead>
<tr>
<th>属性描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>bfifo-limit (整数; 默认: 15000)</td>
<td>BFIFO 队列可以容纳的最大字节数</td>
</tr>
<tr>
<td>kind (bfifo</td>
<td>pcq</td>
</tr>
<tr>
<td>bfifo</td>
<td>字节先进先出</td>
</tr>
<tr>
<td>pcq</td>
<td>每次连接队列</td>
</tr>
<tr>
<td>pfifo</td>
<td>数据包先进先出</td>
</tr>
<tr>
<td>red</td>
<td>随机早先探测</td>
</tr>
<tr>
<td>sfq</td>
<td>随机公平队列</td>
</tr>
<tr>
<td>name (名称)</td>
<td>队列类型相关名称</td>
</tr>
<tr>
<td>pcq-classifier (dst-address | dst-port | src-address | src-port; 默认: “”)</td>
<td>PCQ 对其子队列进行分组的分类器。可以同时被数个分类器使用。例如： src-address， src-port 可使用不同源地址和源端口把所有包分为独立的子队列</td>
</tr>
<tr>
<td>pcq-limit (整数; 默认: 50)</td>
<td>可以容纳一个单个 PCQ 子队列的包的数目</td>
</tr>
<tr>
<td>pcq-rate (整数; 默认: 0)</td>
<td>对每个子队列允许的最大数据率。 0 值指的是没有任何限制</td>
</tr>
<tr>
<td>pcq-total-limit (整数; 默认: 2000)</td>
<td>可以容纳整个 PCQ 队列的包的数目</td>
</tr>
<tr>
<td>pfifo-limit (整数)</td>
<td>PFIFP 队列可以容纳包的最大数目</td>
</tr>
<tr>
<td>red-avg-packet (整数; 默认: 1000)</td>
<td>被 RED 用来对平均队列长度计算</td>
</tr>
<tr>
<td>red-burst (整数)</td>
<td>用来决定平均队列长度被真实队列长度影响的快慢的字节值。较长的值将减慢 RED 的计算速度——较长的脉冲串也是允许的</td>
</tr>
<tr>
<td>red-limit (整数)</td>
<td>以字节计算。如果真实队列长度（非平均值）超过了这个值那么所有大于这个值的包都将被丢弃。</td>
</tr>
<tr>
<td>red-max-threshold (整数)</td>
<td>以字节计算。数据包标记概率最高的平均队列长度</td>
</tr>
<tr>
<td>red-min-threshold (整数)</td>
<td>当平均 RED 队列长度达到这个值时，数据包标记才有可能</td>
</tr>
<tr>
<td>sfq-allot (整数; 默认: 1514)</td>
<td>在一个 round-robin 循环中从子队列发出的字节数</td>
</tr>
<tr>
<td>sfq-perturb (整数; 默认: 5)</td>
<td>以秒计时。指定改变 SFQ 的散列算法的频率</td>
</tr>
</tbody></table>
<hr>
<h4 id="Bursts"><a href="#Bursts" class="headerlink" title="Bursts:"></a>Bursts:</h4><p>脉冲串用来在一段很短的时间允许更高数据率。每 1/16 burst-time 时间，路由器都会计算每个类在上一个 burst-time时间的平均数据率。如果这个平均数据率小于 burst-threshold，脉冲串就会被启用且实际数据率达到 burst-limit bps，否则实际数据率将跌至 max-limit 或 limit-at。</p>
<p>让我们考虑如果我们有个 max-limit=256000， burst-time=8， burst-threshold=192000 以及burst-limit=512000 的设置情况。当一个用户通过 HTTP 下载一个文件，我们可以观察到这样的现象： </p>
<p><img src="/2016/09/25/ROS%E7%9A%84%E9%98%9F%E5%88%97%E7%B1%BB%E5%9E%8B(Queue%20Type)/img1957.jpg" alt></p>
<p>在最开始的 8 秒中平均数据率是 0bps 因为在应用队列规则前没有流量通过。由于这个平均数据率小与 burst-threshold(192kbps)，所以脉冲串会被使用。在第一秒之后，平均数据率为(0+0+0+0+0+0+0+512)/8=64kbps， 低于burst-threshold。 在第二秒后，平均数据率为(0+0+0+0+0+0+512+512)/8=128kbps。 在第三秒之后达到临界点。 此时平均数据率变得大于 burst-threshold。 这个时候脉冲串将被禁用且当前数据率降至 max-limit (256kbps)。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS防火墙过滤简介</title>
    <url>/2015/12/24/ROS%E9%98%B2%E7%81%AB%E5%A2%99%E8%BF%87%E6%BB%A4%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>在RouterOS 通过ip firewall 能对IP数据包过滤、P2P协议过滤、源和目标IP、端口、IP协议、协议（ICMP、TCP、MSS等）、网络接口、对内部的数据包和连接作标记、ToS字节、内容过滤、顺序优先与数据频繁和时间控制、包长度控制…</p>
<p>从数据传输上分类：分为input、foreward和output三种链表（chain）过滤，不管是二层或者三层过滤上都包含这三个链表。RouterOS的防火墙包括了对address-list和L7-protocol等调用</p>
<p><strong>快速设置向导</strong></p>
<p>• 添加一条firewall 规则，将所有通过路由器到目标协议为TCP，端口为135 的数据包丢弃掉：</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ipfirewall filter add chain=forward dst-port=135 protocol=tcp action=drop</span><br></pre></td></tr></table></figure>
<p>• 拒绝通过Telnet 访问路由器(协议 TCP, 端口 23)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ip firewallfilter add chain=input protocol=tcp dst-port=23 action=drop</span><br></pre></td></tr></table></figure>
<p>操作路径: <strong><em>/ip firewall filter</em></strong></p>
<p>网络防火墙始终保持对那些有威胁敏感的数据进入内部网络中，无论怎样网络都是连接在一起的，总是会有某些从外闯入你的LAN，窃取资料和破坏内部网络。适当的配置防火墙可以有效的保护网络。</p>
<p>MikroTikRouterOS 是功能非常强大的防火墙，包括以下特征：</p>
<p>• 包过滤功能</p>
<p>• P2P 协议过滤</p>
<p>• 7 层协议过滤</p>
<p>• IPv6 防火墙过滤</p>
<p>• 数据传输分类：</p>
<blockquote>
<p>源 MAC 地址</p>
</blockquote>
<blockquote>
<p>IP 地址（网段或列表）和地址类型（广播、本地、组播）</p>
</blockquote>
<blockquote>
<p>端口或端口长度</p>
</blockquote>
<blockquote>
<p>IP 协议</p>
</blockquote>
<blockquote>
<p>协议选择选项(ICMP 类型和代码字段、TCP 标记、IP 选项和MSS)</p>
</blockquote>
<blockquote>
<p>Interface 的数据包从那里到达或通过那里里去</p>
</blockquote>
<blockquote>
<p>内部数据流与连接标记</p>
</blockquote>
<blockquote>
<p>ToS (DSCP)</p>
</blockquote>
<blockquote>
<p>数据包内容</p>
</blockquote>
<blockquote>
<p>Connection-rate 连接速率</p>
</blockquote>
<blockquote>
<p>PCC 分离器</p>
</blockquote>
<blockquote>
<p>数据包大小</p>
</blockquote>
<blockquote>
<p>包到达时间</p>
</blockquote>
<p><strong>基本过滤规则</strong></p>
<p>防火墙操作是借助于防火墙的策略，一个策略规则是告诉路由器如何处理一个 IP 数据包，每一条策略都由两部分组成，一部份是传输状态配置和定义如何操作数据包。数据链（Chains）是为更好的管理和组织策略。</p>
<p>过滤功能有三个默认的数据链（chains）：<strong>input</strong>, <strong>forward</strong> 和<strong>output</strong> 他们分别负责从哪里进入路由器的、通过路由器转发的与从路由器发出的数据。用户也可用自定义添加链，当然这些链没有默认的传输配置，需要在三条默认的链中对<strong>action=jump</strong> 策略中相关的<strong>jump-target</strong> 进行配置。</p>
<h3 id="过滤链"><a href="#过滤链" class="headerlink" title="过滤链"></a>过滤链</h3><p>下面是三条预先设置好了的 chains，他们是不被能删除的：</p>
<h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>– 用于处理进入路由器的数据包，即数据包目标IP 地址是到达路由器一个接口的IP 地址，经过路由器的数</p>
<p>据包不会在input-chains 处理。</p>
<h4 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h4><p>– 用于处理通过路由器的数据包</p>
<h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>– 用于处理源于路由器并从其中一个接口出去的数据包。</p>
<p>他们具体的区别如下：</p>
<p>IP 数据包进入input 链表的数据工作流程：</p>
<p><img src="/2015/12/24/ROS%E9%98%B2%E7%81%AB%E5%A2%99%E8%BF%87%E6%BB%A4%E7%AE%80%E4%BB%8B/input.jpg" alt></p>
<p>IP 数据包进入output 链表的流程：</p>
<p><img src="/2015/12/24/ROS%E9%98%B2%E7%81%AB%E5%A2%99%E8%BF%87%E6%BB%A4%E7%AE%80%E4%BB%8B/output.jpg" alt></p>
<p>IP 数据进入forward 链表的流程:</p>
<p><img src="/2015/12/24/ROS%E9%98%B2%E7%81%AB%E5%A2%99%E8%BF%87%E6%BB%A4%E7%AE%80%E4%BB%8B/forward.jpg" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>firewall</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS高性能nat实践实例</title>
    <url>/2016/09/25/ROS%E9%AB%98%E6%80%A7%E8%83%BDnat%E5%AE%9E%E8%B7%B5%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>这个部分是 RouterOS 对大流量 nat 网关的实践做介绍， RouterOS v6 配合 Intel 至强处理器搭建了一个 nat网关设备， 单台处理超过 1.5G 的网络流量，前期采用 18 条多线路接入，每条 100M， PCC 负载均衡，两个千兆以太网卡连接华为 5700 交换机， 这个实践配置供大家参考：<br><strong>系统配置：</strong><br>CPU： Intel Xen 5606 × 2 （未打开超线程，一共使用 8 核）+ Intel 芯片组（别人的主机，主板只知道是 ASUS，型号没有记）<br>内存： DDR3 ECC 内存 2G ×2 （双通道需要配置 2 根 2G 内存，当然 RouterOS 只能识别 2G）<br>硬盘： 1G Flash<br>网卡： Intel 82580 4 口网卡，每个网口中断 8<br>RouterOS v6.6， 功能包：仅安装 system、 ppp 和 advanced-tools</p>
<a id="more"></a>
<p>使用中，手动调整了 IRQ，指定网卡每个终端负载到相应的 CPU：</p>
<p><img src="/2016/09/25/ROS%E9%AB%98%E6%80%A7%E8%83%BDnat%E5%AE%9E%E8%B7%B5%E5%AE%9E%E4%BE%8B/1.jpg" alt></p>
<p>该配置主要用于跑 nat，其配置均省略，但出现过配置 simple queue 做整体流控后自动重启现象，后取消流控配置后，运行均无出现死机情况，这点估计是 RouterOS 在 Queue 还存在 bug。 共计 18 条，总 nat 处理流量达到 1.6G 左右，下面是两张网卡的流量截图： </p>
<p><img src="/2016/09/25/ROS%E9%AB%98%E6%80%A7%E8%83%BDnat%E5%AE%9E%E8%B7%B5%E5%AE%9E%E4%BE%8B/2.jpg" alt></p>
<p>CPU 负载情况：<br><img src="/2016/09/25/ROS%E9%AB%98%E6%80%A7%E8%83%BDnat%E5%AE%9E%E8%B7%B5%E5%AE%9E%E4%BE%8B/3.jpg" alt></p>
<p>CPU 保持在 70%以内，运行无异常， session 数大约 24k 左右 。 个人更多希望是能多跑点会话，这样知道RouterOS v6 版本的 nat 会话性能如何， 但有人说如果上行流量上去了， CPU 会比较高，但我更关心的是会话数，因为衡量 nat 转发性能会话数很非常重要的。 经过进一步测试，这套系统在 22 条 100M 线路 PCC 负载均衡后，流量只能达到 1.7G，且 CPU 在 83%左右，无法跑到 2 条千兆链路的 95% 。但如果拆分为 2 台服务器，每台 11 条 100M 线路做 PCC，链路使用率不仅能到 95%，且 CPU 都维持在 30%以内， 2 台 CPU 加起来不到 60%，远低于一台的 83%，因此 PCC 规则增加对系统负载也成倍增长，同时 nat 对 RouterOS。 </p>
<p>该平台已经稳定运行了 225 天： </p>
<p><img src="/2016/09/25/ROS%E9%AB%98%E6%80%A7%E8%83%BDnat%E5%AE%9E%E8%B7%B5%E5%AE%9E%E4%BE%8B/4.jpg" alt></p>
<p>在此案例中网卡的中断数量对 CPU 均衡起到较大作用，所以在针对大流量的网络处理上，配合多 CPU 必须选择中断数高的网卡， 以上内容供大家参考 !</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>Ros设置6to4通道访问ipv6网络</title>
    <url>/2015/07/23/Ros%E8%AE%BE%E7%BD%AE6to4%E9%80%9A%E9%81%93%E8%AE%BF%E9%97%AEipv6%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>Ipv4地址已经使用殆尽，ipv6网络国内各大运营商还没有正式部署，现在要想使用ipv6网络只能通过安装软件或者设置6to4通道方式进行，下面的方法可以使你在routeros上设置一个6to4通道，从而使局域网中的所有用户不需要特别设置就可以使用ipv6网络。下面看一下做法:  </p>
<hr>
<a id="more"></a>
<ol>
<li>首先去<a href="http://www.tunnelbroker.net/" target="_blank" rel="noopener">http://www.tunnelbroker.net/</a>这个网站申请一个账号，这个网站提供免费的6to4服务，免费用户限建两个通道。提交注册信息后网站会将密码发送到你的注册邮箱里。这个网站本身支持ipv6协议，如果电脑支持ipv6的话会先尝试用ipv6打开，不行才使用ipv4地址登陆。</li>
<li>登陆网站，点击左边的Create Regular Tunnel新建一个通道，这时网站会自动侦测你当前的ip地址及适合的网关位置，也可以手动将需要建立通道的ipv4地址填入文本框内，然后选择一个合适的网关，点提交按钮后系统会自动为这个ip建立6to4通道。</li>
<li>Ros设置方法：这里不给出具体的设置了，因为tunnelbroker网站已经给你了最大的便利，提供各种路由系统的设置方法，在刚才生成6to4通道页面上有一个example configurations标签页，点击后有一个select your os的选单，选择Mikrotik后下面就出现了ros设置脚本，一共3条分别粘贴到ros的控制台中就可以完成设置了。设置完成后可以在ros中ping一下ipv6的网关看看通不通，需要注意的是如果是双线用户，这里可能会不通，具体原因本人还不是太清楚，怀疑是双线回流的问题，单线测试没有问题，如果是pppoe拨号动态ip用户，每次重新拨号后都需要到tunnelbroker网站手动更新ip，比较麻烦。如果需要手动更新ip，登陆tunnelbroker网站后在右侧有个tunnelbroker的链接，点击后就可以在页面下方看到通道的链接了。</li>
<li>最后，如果想让内网用户自动获得有效的ipv6地址，可以在ros中添加一条<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ipv6 address add address=ipv6地址段 interface=Lan advertise=yes <span class="built_in">disable</span>=no</span><br></pre></td></tr></table></figure>
这里的ipv6地址段就是tunnelbroker通道页面里的Routed /64：这一行后面的地址。</li>
<li>可能出现的问题：</li>
</ol>
<blockquote>
<blockquote>
<ol>
<li>Ros中无法ping通ipv6地址，如ipv6网关，如果是双线，禁用掉不使用的那条线。如果不是，重新检查设置。</li>
<li>客户端无法ping通ipv6地址：<ul>
<li>检查客户端电脑是否正确安装了ipv6协议，win7和vista原版用户自带ipv6协议，如果之前卸载了的需要重新安装。xp用户需要手动安装。</li>
<li>检查客户端是否获得了有效地ipv6地址。</li>
<li>如果采用nat上网，需要确认防火墙能够通过41号协议。</li>
</ul>
</li>
<li>最后说一下，使用此种方式毕竟不是真正的ipv6网络，速度受到6to4网关的限制，由于tunnelbroker的服务器大多都在国外，所以速度较慢。</li>
</ol>
</blockquote>
</blockquote>
<hr>
<p><font color="red">这个功能也已经加入了脚本生成器-左下角工具选项中,有兴趣研究的可以自己尝试和了解下!</font></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>ipv4</tag>
        <tag>ipv6</tag>
      </tags>
  </entry>
  <entry>
    <title>RouterBOARD 产品命名与标识</title>
    <url>/2016/09/22/RouterBOARD%20%E4%BA%A7%E5%93%81%E5%91%BD%E5%90%8D%E4%B8%8E%E6%A0%87%E8%AF%86/</url>
    <content><![CDATA[<p>RouterBOARD产品型号较多，各种字母和数字标识繁琐，下面介绍下产品命名的特点<br> RouterBOARD基本编号适合大多型号，除RB600，RB800和RB1000系列型号外，他们的区别如下：</p>
<ul>
<li>RB1XX，即RB100系列 </li>
<li>RB133，即是100系列，有3个以太网口，3个MiniPCI无线扩展接口 </li>
<li>RB493，即400系列，有9个以太网口，3个MiniPCI扩展</li>
</ul>
<h4 id="1-RouterBOARD基本命名规则"><a href="#1-RouterBOARD基本命名规则" class="headerlink" title="1.RouterBOARD基本命名规则:"></a>1.RouterBOARD基本命名规则:</h4><a id="more"></a>
<p>  &lt;主板名称&gt; &lt;主板特征&gt; - &lt;集成无线网卡&gt; &lt;无线网卡特征&gt; - &lt;连接接口类型&gt; - &lt;外壳类型&gt;<br>  后缀代表含义： </p>
<ul>
<li>AH，A代表高内存，H代表高性能（高CPU） </li>
<li>e，代表有PCI-e接口扩张 *    G，代表高性能和千兆网口 </li>
<li>U，代表USB扩展 *    R，代表集成无线模块 </li>
<li>P，POE *    L，Low低成本产品 *    S，SFP光扩展接口 </li>
<li>x（N），代表CPU内核数量，如x2，x16，x32 </li>
</ul>
<h4 id="2-集成无线网卡命名"><a href="#2-集成无线网卡命名" class="headerlink" title="2.集成无线网卡命名"></a>2.集成无线网卡命名</h4><p>如果集成无线网卡设备，命名格式将是如下：<br>  &lt;频段&gt;&lt;发射功率&gt;&lt;协议&gt;&lt;通道数量&gt;<br>  频段 </p>
<ul>
<li>5 – 支持5Ghz </li>
<li>2 – 支持2.4Ghz </li>
<li>52 – 支持5Ghz和2.4Ghz </li>
</ul>
<p>发射功率 </p>
<ul>
<li>无命名 - “普通发射功率” - &lt;23dBm at 6Mbps 802.11a; &lt;24dBm at 6Mbps 802.11g </li>
<li><a href="http://wiki.mikrotik.com/wiki/Manual:Product_Naming#H" target="_blank" rel="noopener">H</a> - “高发射功率” - 23-24dBm at 6Mbps 802.11a; 24-27dBm at 6Mbps 802.11g </li>
<li>HP - “较高发射功率” - 25-26dBm 6Mbps 802.11a; 28-29dBm at 6Mbps 802.11g </li>
<li>SHP - “超高发射功率” - 27+dBm at 6Mbps 802.11a; 30+dBm at 6Mbps 802.11g </li>
</ul>
<p>无线协议 </p>
<ul>
<li>无命名 – 仅支持802.11a/b/g </li>
<li>n – 支持802.11n </li>
<li>ac – 支持802.11ac </li>
</ul>
<p>无线通道数量 </p>
<ul>
<li>无命名 – 单无线通道 </li>
<li>D – 双无线通道 </li>
<li>T – 三无线通道 </li>
</ul>
<h4 id="3-无线网卡接口类型命名"><a href="#3-无线网卡接口类型命名" class="headerlink" title="3.无线网卡接口类型命名"></a>3.无线网卡接口类型命名</h4><ul>
<li>无命名 – 扩展槽根据类型或型号决定 </li>
<li>MMCX – MMCX接口 </li>
<li>u.FL - u.FL接口 </li>
</ul>
<h4 id="4-外壳类型命名"><a href="#4-外壳类型命名" class="headerlink" title="4.外壳类型命名"></a>4.外壳类型命名</h4><ul>
<li>无命名 – 一个产品的主型号默认使用外壳 </li>
<li>BU - board unit (无外壳) – 特殊需求情况下，为仅主板需求的客户提供 </li>
<li>RM – 机柜外壳型 </li>
<li>IN – 室内外壳型 </li>
<li>OUT – 室外防水型 </li>
<li>SA – 集成扇形天线型 </li>
<li>HG – 高增益天线外壳 </li>
<li>EM – 内存扩展型 例如：RB912UAG-5HPnD </li>
<li>RB (RouterBOARD) </li>
<li>912 – 9系列主板，1个以太网接口，两个无线网卡接口（集成和MiniPCIe接口）</li>
<li>UAG – USB接口，大内存和千兆以太网接口 </li>
<li>5HPnD – 内置5GHz较高发射功率网卡，支持双通道的802.11n协议</li>
</ul>
<h4 id="5-Cloud-Core-Router命名"><a href="#5-Cloud-Core-Router命名" class="headerlink" title="5.Cloud Core Router命名"></a>5.Cloud Core Router命名</h4><p>  Cloud Core Router (缩写CCR)<br>&lt;4组产品数字编号&gt;-&lt;端口数量&gt;-&lt;外壳类型&gt;<br>4 组数字编号</p>
<ul>
<li>第一个数字代表产品系列 </li>
<li>第二个数字保留所用 </li>
<li>第三和第四代表设备上的CPU核心数量 </li>
</ul>
<p>端口数量 </p>
<ul>
<li>-<n>G – 千兆以太网端口数量 </n></li>
<li>-<n>S – SFP端口数量 </n></li>
<li>-<n>S+ - SFP+端口数量 </n></li>
</ul>
<h4 id="6-Cloud-Router-Switch命名"><a href="#6-Cloud-Router-Switch命名" class="headerlink" title="6.Cloud Router Switch命名"></a>6.Cloud Router Switch命名</h4><p>  Cloud Router Switch (缩写CRS)命令<br>   &lt;3组产品数字编号&gt;-&lt;端口数量&gt;-&lt;集成无线网卡&gt;-&lt;外壳类型&gt;<br>   3组数字编号</p>
<ul>
<li>第一个数字代表产品系列</li>
<li>第二和第三代表所有有线接口数量(Ethernet, SFP, SFP+)</li>
</ul>
<p>端口数量</p>
<ul>
<li>-<n>G – 千兆以太网端口数量</n></li>
<li>-<n>S – SFP端口数量</n></li>
<li>-<n>S+ - SFP+端口数量</n></li>
</ul>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>RouterBOARD产品命名规则</tag>
      </tags>
  </entry>
  <entry>
    <title>RouterOS新功能CAPs(ROS的AC控制功能)可以无缝网络漫游[视频]</title>
    <url>/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8%5B%E6%9C%89%E8%A7%86%E9%A2%91%5D/</url>
    <content><![CDATA[<p>MikroTik在14年的意大利MUM上，除了发布新的CCR、CRS和RB产品，还公布了一个新的功能——CAPs即 Controlled Access Point system Manager(CAPsMAN)，通俗点说，它就是一个AP控制器功能插件，可以将任何一台RouterOS变为AP控制器，只要安装CAP的功能包（集成在wireless-fp功能包中） </p>
<p>它的功能就是用于集中控制你所有的RouterOS AP设备，以便快速部署大型无线网络【可以做到类似信号漫游，无缝切换，集中设置】 </p>
<a id="more"></a>
<p>– CAPs管理与AP之间连接能同时工作中二层和三层网络，也就是如果你想把AC端放在某一个地方也可以集中管理远距离的AP设备的SSID，信道，密码，等配置信息。 </p>
<p>在CAPs系统中包含数个AP（CAPsMAN代表集中管理系统，CAP代表被管理AP），CAPs为他们提供无线连接管理，维护客户端验证和数据转发。</p>
<p>当CAP被控制管理，将建立与管理端的配置连接，通常由AP执行的如AP访问控制，客户端验证，现在交由管理端控制。CAP仅仅是维护无线连接层面的加密和解码，根据配置，数据将转发到管理端为集中处理或转发到本地的CAP。</p>
<hr>
<p>下面我就来演示一下建立一个简单的CAPsMan管理环境</p>
<ul>
<li>准备1台RouterOS6.11版本或更高的系统作为AC端，用于控制其他RouterOS【6.11或更高版本，要和服务端一致】的无线网卡，但是不能控制自己的无线哦</li>
<li>CAPs功能包可以在<a href="http://www.mikrotik.com/download" target="_blank" rel="noopener">这里下载</a></li>
<li>CAPsMAN的功能包可以独立安装到任何平台的RouterOS v6.11以上版本，CAPsMAN功能还在测试中，所以功能包为独立的wireless-fp-6.11-mipsbe.npk，安装后将替代原理的wireless功能包，功能包升级后wireless功能包被自动禁用，wireless-fp启用（该功能以后可能会合并），如下图：</li>
</ul>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/1-1.jpg" alt></p>
<ul>
<li>开启Enable后reboot设备</li>
<li>AC控制器端设置方法下，开启这个功能后进行配置</li>
</ul>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/2-1.jpg" alt></p>
<ul>
<li>下面开始配置，配置名称，模式默认只能选AP，还有SSID名称，信号，安全方式等，做成一个个配置供后面选择和切换。</li>
</ul>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/3-1.jpg" alt></p>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/4-1.jpg" alt></p>
<ul>
<li>上面的AC端配置完成后，配置AP端如图：点击无线–CAP，开启，interface是选择管理的无线网卡，Discovery Interface是连接到AC端的网口设备【如果是EoIP就选之】，下面那个10.0.0.254是我AC端设备的IP地址，默认可以不填他就优先用MAC进行对接。</li>
</ul>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/5-1.jpg" alt></p>
<ul>
<li>完成对接之后，在AC端可以看到这个设备，你可以修改设备标识。</li>
</ul>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/6-1.jpg" alt></p>
<ul>
<li>我建立一个Bridge，然后把控制接口和这个设备放在一起，如果你加入了多个AP设备，那就全部添加到这个桥里面，然后把DHCP或者其它服务分配给这个桥，他们每个AP就像接了个网线到你这里一样了。</li>
</ul>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/8-1.jpg" alt></p>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/7-1.jpg" alt></p>
<p>留意哦：这里如果你有2个或以上的AP端设备加入后，他们的信号名称是一样的哦，得到的效果就像无缝漫游一样，只要在多个设备覆盖范围内，就可以随意自动无缝切换不掉线。 甚至如果你是整条街都铺满这个设备，还可以通过外网建立EoIP来建立虚拟隧道来统一远程接入和管理。</p>
<p>即CAPsMAN为CAP管理器菜单，CAP为被管理网卡菜单<br>CAP连接到CAPsMAN<br>CAPsMAN系统要为无线网络提供管理控制，需要至少一个CAP必须与CAPsMAN建立连接。一个管理连接建立可以使用MAC或IP层协议和安全的DTLS，通常一个CAP能传递客户端数据连接到管理器，但数据连接并不安全，因此需要考虑数据安全的加密，例如IPSec或加密隧道。 </p>
<p>CAP 连接到CAPsMAN 能建立连接使用以下两种传输协议： </p>
<p>MAC层连接特性：<br>? – 没有在CAP上配置IP地址<br>? – CAP和CAPsMAN必须在相同二层网络中，二层交换或虚拟网络（二层隧道，例如EoIP） </p>
<p>IP层连接（UDP）特性：</p>
<p>? – 如果需要可穿透NAT<br>? – CAP必须通过IP协议连接到CAPsMAN 根据网络情况，如果CAP与CAPsMAN没有在相同二层网络，必须为CAPsMAN分配IP地址，且两端路由可达。</p>
<p>建立连接规则 </p>
<p>当可以获取的CAPsMAN列表建立，CAP选择一个CAPsMAN基于以下规则：<br>§ 如果 caps-man-names 参数指定管理名称（CAPsMAN的/system identity）CAP将优先选择。如果该参数为空，将连接其他CAPsMAN。<br>§ MAC层连接优先级高于IP层连接<br>当管理器被选择后，CAP尝试建立<a href="https://baike.baidu.com/view/2071633.htm?fr=aladdin" target="_blank" rel="noopener">DTLS</a>连接。 </p>
<p>CAPsMAN与CAP实例 </p>
<p>下面是一个简单的CAP实例，假设我们网络中只有一个CAPsMAN和一个CAP，他们之间通过二层网络连接。</p>
<p><img src="/2015/12/26/RouterOS%E6%96%B0%E5%8A%9F%E8%83%BDCAPs(ROS%E7%9A%84AC%E6%8E%A7%E5%88%B6%E5%8A%9F%E8%83%BD)%E5%8F%AF%E4%BB%A5%E6%97%A0%E7%BC%9D%E7%BD%91%E7%BB%9C%E6%BC%AB%E6%B8%B8[%E6%9C%89%E8%A7%86%E9%A2%91]/41-1.png" alt></p>
<p>参考资料： 官方wiki：<a href="http://wiki.mikrotik.com/wiki/Manual:CAPsMAN" target="_blank" rel="noopener">http://wiki.mikrotik.com/wiki/Manual:CAPsMAN</a></p>
<hr>
<p><strong>参考视频教程(搬砖视频):</strong></p>
<iframe height="270" width="480" src="http://player.youku.com/embed/XMTc0MDUxNTY1Mg==" frameborder="0" 'allowfullscreen'></iframe>]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>AC</tag>
        <tag>CAP</tag>
        <tag>CAPs</tag>
      </tags>
  </entry>
  <entry>
    <title>RouterOS裸机安装后由32位系统升级为64位</title>
    <url>/2020/07/14/RouterOS%E8%A3%B8%E6%9C%BA%E5%AE%89%E8%A3%85%E5%90%8E%E7%94%B132%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7%E4%B8%BA64%E4%BD%8D/</url>
    <content><![CDATA[<p>RouterOS裸机安装是32位系统,只能使用2gb内存,并且要在routeros的kvm模块下安装虚拟机只能是32位虚拟机系统,并且虚拟机内存不能大于2gb.想要在KVM系统下安装64位的系统,就必须升级64位的ROS了.</p>
<h4 id="升级64位系统方法"><a href="#升级64位系统方法" class="headerlink" title="升级64位系统方法"></a>升级64位系统方法</h4><p>下载官方未正式发布的<a href="http://mirror.poliwangi.ac.id/mikrotik/6.31/all_packages-x86-6.31.zip" target="_blank" rel="noopener">6.31版系统</a>, 解压后把所有.npk文件上传到routeros根目录(Flies里)</p>
<ul>
<li>然后在 System-Packages-Downgrage (降级按钮),把系统降级到6.31</li>
<li>重启后,在 System-Resources-Hardware 下会看到有 x86_64,钩上后重启routeros<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/system reboot</span><br></pre></td></tr></table></figure></li>
<li>最后在 System-Packages 下选择自动升级到最新版本</li>
</ul>
<a id="more"></a>
<p>查看 System-Resources,可以看到 Architecture Name 是 x86_64,并且 Total Memory 为系统安装的所有内存.</p>
<p><strong>注意:</strong></p>
<ul>
<li>64位系统下,wifi模块暂时无法使用,谨慎升级!</li>
<li>降级为6.31时,要使用旧版本的winbox登陆,密码有可能会被清空,也就是无需输入密码即可登陆winbox,用户名保持不变</li>
<li>降级前务必做好备份功能</li>
</ul>
]]></content>
      <tags>
        <tag>64位</tag>
      </tags>
  </entry>
  <entry>
    <title>RouterOS限速设置里的Burst(突发值)原理</title>
    <url>/2016/09/25/RouterOS%E9%99%90%E9%80%9F%E8%AE%BE%E7%BD%AE%E9%87%8C%E7%9A%84Burst(%E7%AA%81%E5%8F%91%E5%80%BC)%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><strong>Burst 允许满足队列需要增加的带宽，甚至要求速率在有限的时间内大于 MIR（ max-limit）， Burst 发生仅当队列的 average-rate 在 burst-time 时间内小于 burst-threshold。 Burst 停止当队列的 average-rate 在 burst-time时间内大于或者等于 burst-threshlod</strong></p>
<hr>
<p>Burst 原理很简单，如果 burst 被允许 max-limit 被 burst-limit 代替，当 burst 被禁止 max-limit 恢复不变 </p>
<a id="more"></a>
<ol>
<li>burst-limit (整型) ：能被 burst 允许达到的最大上传和下载数据 </li>
<li>burst-time (时间) ：一段时间，单位秒，用于平均速率的计算 (并非实际的 burst 时间长度) </li>
<li>burst-threshold (整型)：这个参数是通过计算后比对，并开关 burst 功能 </li>
<li>average-rate (隐含只读参数) ：路由器计算平均速率根据 burst-time 划分为 16 份，每份都会计算出一个平均速率进行比对 </li>
<li>actual-rate (隐含只读参数) : 队列的实际传输带宽</li>
</ol>
<hr>
<h4 id="Burst-事例"><a href="#Burst-事例" class="headerlink" title="Burst 事例"></a>Burst 事例</h4><p>我们设置的 Queue 速率参数： limit-at=1M , max-limit=2M , burst-threshold=1500k , burst-limit=4M Burst-time=16s</p>
<p>客户将会下载一个4MByte（ 32Mbit，队列单位是bit）数据，下载将从0秒开始，第二次下载将开始于第17秒， 最后一分钟传输将停止。 </p>
<p><img src="/2016/09/25/RouterOS%E9%99%90%E9%80%9F%E8%AE%BE%E7%BD%AE%E9%87%8C%E7%9A%84Burst(%E7%AA%81%E5%8F%91%E5%80%BC)%E5%8E%9F%E7%90%86/img1959.jpg" alt><br><img src="/2016/09/25/RouterOS%E9%99%90%E9%80%9F%E8%AE%BE%E7%BD%AE%E9%87%8C%E7%9A%84Burst(%E7%AA%81%E5%8F%91%E5%80%BC)%E5%8E%9F%E7%90%86/img1960.jpg" alt> </p>
<p>如同我们看到的客户要求的带宽 burst 在 6 秒钟能达到 4Mbps。这个最长的 burst 时间具有一个值（ 最长突发时间 = burst-threshold * burst-time / burst-limit）。很快 burst 用完突发时间，剩下的数据下载将到 2Mbps。在 9秒钟后数据被下载完，一段时间没有流量， Burst 有 7 秒钟的空闲，并重新计算，第 16 秒开始将有新的下载开始。  </p>
<p><strong>注:从这个事例我们证明可以发生在下载的中间部分， Burst 持续了 4</strong> <strong>秒钟。</strong> </p>
<p>每个 Average rate（平均速率）是根据 burst time 的 1/16，因此这个事例是 1 秒钟 计算一次平均速率</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>average-rate</th>
<th>burst</th>
<th>实际速率</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0)/16=0Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>1</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+4)/16=250Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>2</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+0+4+4)/16=500Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>3</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+4+4+4)/16=750Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>4</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+4+4+4+4)/16=1000Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>5</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+4+4+4+4+4)/16=1250Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>6</td>
<td>(0+0+0+0+0+0+0+0+0+0+4+4+4+4+4+4)/16=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>7</td>
<td>(0+0+0+0+0+0+0+0+0+4+4+4+4+4+4+2)/16=1625Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>8</td>
<td>(0+0+0+0+0+0+0+0+4+4+4+4+4+4+2+2)/16=1750Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>9</td>
<td>(0+0+0+0+0+0+0+4+4+4+4+4+4+2+2+2)/16=1750Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>10</td>
<td>(0+0+0+0+0+0+4+4+4+4+4+4+2+2+2+2)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>11</td>
<td>(0+0+0+0+0+4+4+4+4+4+4+2+2+2+2+0)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>12</td>
<td>(0+0+0+0+4+4+4+4+4+4+2+2+2+2+0+0)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>13</td>
<td>(0+0+0+4+4+4+4+4+4+2+2+2+2+0+0+0)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>14</td>
<td>(0+0+4+4+4+4+4+4+2+2+2+2+0+0+0+0)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>15</td>
<td>(0+4+4+4+4+4+4+2+2+2+2+0+0+0+0+0)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>16</td>
<td>(4+4+4+4+4+4+2+2+2+2+0+0+0+0+0+0)/16=1875Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>17</td>
<td>(4+4+4+4+4+2+2+2+2+0+0+0+0+0+0+0)/16=1625Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>18</td>
<td>(4+4+4+4+2+2+2+2+0+0+0+0+0+0+0+2)/16=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>19</td>
<td>(4+4+4+2+2+2+2+0+0+0+0+0+0+0+2+2)/16=1375Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>20</td>
<td>(4+4+2+2+2+2+0+0+0+0+0+0+0+2+2+4)/16=1375Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>21</td>
<td>(4+2+2+2+2+0+0+0+0+0+0+0+2+2+4+4)/16=1375Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>22</td>
<td>(2+2+2+2+0+0+0+0+0+0+0+2+2+4+4+4)/16=1375Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps</td>
</tr>
<tr>
<td>23</td>
<td>(2+2+2+0+0+0+0+0+0+0+2+2+4+4+4+4)/16=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>24</td>
<td>(2+2+0+0+0+0+0+0+0+2+2+4+4+4+4+2)/16=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>25</td>
<td>(2+0+0+0+0+0+0+0+2+2+4+4+4+4+2+2)/16=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>26</td>
<td>(0+0+0+0+0+0+0+2+2+4+4+4+4+2+2+2)/16=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>27</td>
<td>(0+0+0+0+0+0+2+2+4+4+4+4+2+2+2+2)/16=1625Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>28</td>
<td>(0+0+0+0+0+2+2+4+4+4+4+2+2+2+2+2)/16=1750Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps</td>
</tr>
<tr>
<td>29</td>
<td>(0+0+0+0+2+2+4+4+4+4+2+2+2+2+2+2)/16=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>30</td>
<td>(0+0+0+2+2+4+4+4+4+2+2+2+2+2+2+0)/16=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
<tr>
<td>31</td>
<td>(0+0+2+2+4+4+4+4+2+2+2+2+2+2+0+0)/16=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps</td>
</tr>
</tbody></table>
<hr>
<h4 id="当-Burst-time-8s"><a href="#当-Burst-time-8s" class="headerlink" title="当 Burst-time=8s"></a>当 Burst-time=8s</h4><p><img src="/2016/09/25/RouterOS%E9%99%90%E9%80%9F%E8%AE%BE%E7%BD%AE%E9%87%8C%E7%9A%84Burst(%E7%AA%81%E5%8F%91%E5%80%BC)%E5%8E%9F%E7%90%86/img1963.jpg" alt><br><img src="/2016/09/25/RouterOS%E9%99%90%E9%80%9F%E8%AE%BE%E7%BD%AE%E9%87%8C%E7%9A%84Burst(%E7%AA%81%E5%8F%91%E5%80%BC)%E5%8E%9F%E7%90%86/img1965.jpg" alt> </p>
<p>如果我们减少 burst-time 为 8 秒，我们能看到在这个事例中 burst 仅在下载开始 每个 Average rate（平均速率）是根据 burst time 的 1/16，因此这个事例是 0.5 秒钟计算一次平均速</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>average-rate</th>
<th>burst</th>
<th>实际速率</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0)/8=0Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>0.5</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+2)/8=250Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>1</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+0+2+2)/8=500Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>1.5</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+0+2+2+2)/8=750Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>2</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+0+2+2+2+2)/8=1000Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>2.5</td>
<td>(0+0+0+0+0+0+0+0+0+0+0+2+2+2+2+2)/8=1250Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>3</td>
<td>(0+0+0+0+0+0+0+0+0+0+2+2+2+2+2+2)/8=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>3.5</td>
<td>(0+0+0+0+0+0+0+0+0+2+2+2+2+2+2+1)/8=1625Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>4</td>
<td>(0+0+0+0+0+0+0+0+2+2+2+2+2+2+1+1)/8=1750Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>4.5</td>
<td>(0+0+0+0+0+0+0+2+2+2+2+2+2+1+1+1)/8=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>5</td>
<td>(0+0+0+0+0+0+2+2+2+2+2+2+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>5.5</td>
<td>(0+0+0+0+0+2+2+2+2+2+2+1+1+1+1+1)/8=2125Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>6</td>
<td>(0+0+0+0+2+2+2+2+2+2+1+1+1+1+1+1)/8=2250Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>6.5</td>
<td>(0+0+0+2+2+2+2+2+2+1+1+1+1+1+1+1)/8=2375Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>7</td>
<td>(0+0+2+2+2+2+2+2+1+1+1+1+1+1+1+1)/8=2500Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>7.5</td>
<td>(0+2+2+2+2+2+2+1+1+1+1+1+1+1+1+1)/8=2625Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>8</td>
<td>(2+2+2+2+2+2+1+1+1+1+1+1+1+1+1+1)/8=2750Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>8.5</td>
<td>(2+2+2+2+2+1+1+1+1+1+1+1+1+1+1+1)/8=2625Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>9</td>
<td>(2+2+2+2+1+1+1+1+1+1+1+1+1+1+1+1)/8=2500Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>9.5</td>
<td>(2+2+2+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2375Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>10</td>
<td>(2+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2250Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>10.5</td>
<td>(2+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2125Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>11</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>11.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>12</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>12.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>13</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>13.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+0)/8=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>14</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+0+0)/8=1750Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>14.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+0+0+0)/8=1625Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>15</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+0+0+0+0)/8=1500Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>15.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+0+0+0+0+0)/8=1375Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>16</td>
<td>(1+1+1+1+1+1+1+1+1+1+0+0+0+0+0+0)/8=1250Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>16.5</td>
<td>(1+1+1+1+1+1+1+1+1+0+0+0+0+0+0+0)/8=1125Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>17</td>
<td>(1+1+1+1+1+1+1+1+0+0+0+0+0+0+0+0)/8=1000Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>17.5</td>
<td>(1+1+1+1+1+1+1+0+0+0+0+0+0+0+0+1)/8=1000Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>18</td>
<td>(1+1+1+1+1+1+0+0+0+0+0+0+0+0+1+2)/8=1125Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>18.5</td>
<td>(1+1+1+1+1+0+0+0+0+0+0+0+0+1+2+2)/8=1250Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>19</td>
<td>(1+1+1+1+0+0+0+0+0+0+0+0+1+2+2+2)/8=1375Kbps</td>
<td>average-rate &lt; burst-threshold → Burst 开启</td>
<td>4Mbps (2Mb per 0,5sek)</td>
</tr>
<tr>
<td>19.5</td>
<td>(1+1+1+0+0+0+0+0+0+0+0+1+2+2+2+2)/8=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>20</td>
<td>(1+1+0+0+0+0+0+0+0+0+1+2+2+2+2+1)/8=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>20.5</td>
<td>(1+0+0+0+0+0+0+0+0+1+2+2+2+2+1+1)/8=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>21</td>
<td>(0+0+0+0+0+0+0+0+1+2+2+2+2+1+1+1)/8=1500Kbps</td>
<td>average-rate = burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>21.5</td>
<td>(0+0+0+0+0+0+0+1+2+2+2+2+1+1+1+1)/8=1625Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>22</td>
<td>(0+0+0+0+0+0+1+2+2+2+2+1+1+1+1+1)/8=1750Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>22.5</td>
<td>(0+0+0+0+0+1+2+2+2+2+1+1+1+1+1+1)/8=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>23</td>
<td>(0+0+0+0+1+2+2+2+2+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>23.5</td>
<td>(0+0+0+1+2+2+2+2+1+1+1+1+1+1+1+1)/8=2125Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>24</td>
<td>(0+0+1+2+2+2+2+1+1+1+1+1+1+1+1+1)/8=2250Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>24.5</td>
<td>(0+1+2+2+2+2+1+1+1+1+1+1+1+1+1+1)/8=2375Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>25</td>
<td>(1+2+2+2+2+1+1+1+1+1+1+1+1+1+1+1)/8=2500Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>25.5</td>
<td>(2+2+2+2+1+1+1+1+1+1+1+1+1+1+1+1)/8=2500Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>26</td>
<td>(2+2+2+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2375Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>26.5</td>
<td>(2+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2250Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>27</td>
<td>(2+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2125Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>27.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>28</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>28.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>29</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>29.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>30</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>2Mbps (1Mb per 0,5sek)</td>
</tr>
<tr>
<td>30.5</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1)/8=2000Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
<tr>
<td>31</td>
<td>(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+0)/8=1875Kbps</td>
<td>average-rate &gt; burst-threshold → Burst 关闭</td>
<td>0Mbps (0Mb per 0,5sek)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>Burst</tag>
      </tags>
  </entry>
  <entry>
    <title>User manager 配置指南</title>
    <url>/2016/01/24/User%20manager%20%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>User manager是集成在RouterOS的一个功能包，可用于管理PPPOE,HOTSPOT等用户账号，我们使用前要确认RouterOS的system package里有user manager功能包。 </p>
<p><img src="/2016/01/24/User%20manager%20%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/userman-1.png" alt></p>
<p>如果没有安装功能包，那么就需要下载一个RouterOS相同版本的user-manager.nkp。上传到files文件根目录下。通过reboot命令重启安装功能包。 </p>
<p>在确认安装功能包后。我们登录user manager通过web页面和命令行配置，命令行在tool user-manager目录下配置。 </p>
<p>User manager的web登录默认是80端口。访问路径为<a href="http://192.168.88.1/userman" target="_blank" rel="noopener">http://192.168.88.1/userman</a> </p>
<a id="more"></a>

<p><img src="/2016/01/24/User%20manager%20%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/userman-2.png" alt></p>
<p>User manager默认的登录名为admin，密码为空。登录后： </p>
<p><img src="/2016/01/24/User%20manager%20%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/userman-3.png" alt></p>
<p><strong>您可以将userman汉化成中文后使用：<a href="http://www.rosjb.com/?p=513" target="_blank" rel="noopener">http://www.rosjb.com/?p=513</a></strong></p>
<p>*使用命令行登录usermanager </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@MikroTik] /tool user-manager&gt;</span><br></pre></td></tr></table></figure>

<p>示例：修改user manager默认登录帐号admin的密码（设置为123）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@MikroTik] /tool user-manager&gt;customer</span><br><span class="line">[admin@MikroTik] /tool user-manager customer&gt; <span class="built_in">print</span></span><br><span class="line">Flags: X – disabled</span><br><span class="line">0 login=”admin” password=”123″ backup-allowed=yestime-zone=-00:00 permissions=ownersignup-allowed=no paypal-allowed=no paypal-secure-response=no paypal-accept-pending=no </span><br><span class="line">[admin@MikroTik] /tool user-managercustomer&gt; <span class="built_in">set</span> 0 password=123</span><br></pre></td></tr></table></figure>
<p>Usermanager 操作界面介绍 </p>
<p><img src="/2016/01/24/User%20manager%20%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/userman-4.png" alt></p>
<p>菜单栏：<br>Routers：连接到user manager的路由器IP地址和secret等参数<br>Users：用户帐号信息添加、编辑、删除等<br>Sessions：用户认证管理<br>Customers：添加顾客管理系统，可以建立多个用户管理系统<br>Logs：认证日志<br>Payments：用户付款记录信息<br>Profiles：用户计费策略<br>Settings：user manager网页设置参数、语言设置和网银付款接口设置<br>Reports：导出user manager统计报告<br>A users：在线用户 Advanced<br>search：高级搜索<br>Maintenance：数据维护<br>Logout：退出 </p>
<p>功能区域：<br>Add：添加一个新的规则<br>Edit：对选中的规则进行编辑<br>Generate：生成备份文件 </p>
<font color="red">

<p><strong>友情提示:</strong><br></p></font><p></p>
<font color="red">

<p><strong>6.x用户,如果发现自己无法创建usermanager数据库,首先查看winbox里files目录里是否有user-manager文件夹,如果没有在控制台输入:</strong><br></p></font><p></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tool user-manager database <span class="built_in">set</span> db-path=user-manager</span><br></pre></td></tr></table></figure>
<p><strong>(如果生成不了,修改成user-manager1)两者都可尝试</strong> </p>
<p><strong>然后会看见files文件夹以及数据库创建完毕.就可以正常使用了!</strong> </p>
<p>原文来自官方论坛: <a href="http://forum.mikrotik.com/viewtopic.php?t=92177" target="_blank" rel="noopener">http://forum.mikrotik.com/viewtopic.php?t=92177</a></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>userman</tag>
        <tag>usermanager</tag>
      </tags>
  </entry>
  <entry>
    <title>Ver2.11 发布</title>
    <url>/2020/06/20/Ver2-11/</url>
    <content><![CDATA[<!-- ## 💥新增 -->
<h2 id="💥-更新内容"><a href="#💥-更新内容" class="headerlink" title="💥 更新内容"></a>💥 更新内容</h2><ol>
<li>修复 常用工具-网络监测(Netwatch),log内容无法正常显示的问题</li>
<li>修复 常用工具-WIFI中文SSID生成器,中文转换乱码的问题 (感谢 <font color="red">无锡-IT侦探</font> 指出)</li>
<li>修复 完善 安装-里的PCC的功能,顺序错乱以及参数遗漏的问题</li>
<li>修复 PPP Service PPTP或L2TP,网通为主电信为辅的路由表显示错误问题</li>
<li>取消了所有命令行的 disabled=no 的命令,便于阅读<a id="more"></a>

</li>
</ol>
<h2 id="🛠-下载地址"><a href="#🛠-下载地址" class="headerlink" title="🛠 下载地址"></a>🛠 下载地址</h2><p>Ver2.11: <a href="https://sn9.us/file/14549722-416638652" target="_blank" rel="noopener">下载地址</a> <a href="https://www.lanzous.com/i8injbe" target="_blank" rel="noopener">备用地址</a><br>解压密码:4321<br>md5:c27c63be7e66f41d61fa217cafe082a2 (压缩包的MD5)</p>
]]></content>
      <tags>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN的几种应用方式</title>
    <url>/2016/09/24/VPN%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>RouterOS 的 VPN 系统支持多种方式的应用，能实现企业对等访问、企业与多分支点、多点与移动办公和 VPN数据转移等多种 VPN 连接方式。在 VPN 数据转移方面用处最多的方式是在 VoIP 方面，因为受某些 ISP 网络的限制，使得正常的 VoIP 通讯收到影响，所以可以通过 VPN 的方式实现数据的转移。</p>
<a id="more"></a>
<h3 id="企业间对等互访"><a href="#企业间对等互访" class="headerlink" title="企业间对等互访"></a>企业间对等互访</h3><p><img src="/2016/09/24/VPN%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E6%96%B9%E5%BC%8F/1.jpg" alt></p>
<p>通过 VPN 隧道协议如 PPTP、 L2TP 或者 IPIP 可以建立一个对等的隧道，使得两个办公室能互相访问公司数据和文件。这种方式我们首先建立 PPP 服务器，并给客户端分配帐号和固定 IP 地址、建立 PPP 的拨号和分配 IP地址，最后设置两个远程局域网的 IP 地址路由</p>
<h3 id="企业与分支点总分连接"><a href="#企业与分支点总分连接" class="headerlink" title="企业与分支点总分连接"></a>企业与分支点总分连接</h3><p><img src="/2016/09/24/VPN%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E6%96%B9%E5%BC%8F/2.jpg" alt></p>
<p>我们可以使用 PPTP 或者 L2TP 等隧道协议，建立多个客户端账号，使多个分公司能链接到总公司的中心服务器，并能通过公司管理各个点的数据和信息互联。这样总公司做到对分公司的有效管理，可以即时发布信息到各个分公司。并能实现数据的安全传输。</p>
<h3 id="企业移动办公与综合应用"><a href="#企业移动办公与综合应用" class="headerlink" title="企业移动办公与综合应用"></a>企业移动办公与综合应用</h3><p><img src="/2016/09/24/VPN%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E6%96%B9%E5%BC%8F/3.jpg" alt></p>
<p>RouterOS 支持普通用户的 PPTP 和 L2TP 的 windows 的拨号连接，所以对于在外出差和家庭办公的用户就可以方便的链接到总部的中心服务器和分支点的文件服务器，特别对需要即时处理问题的公司员工最为适合</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>VPN应用场景</tag>
      </tags>
  </entry>
  <entry>
    <title>Ver2.12 发布</title>
    <url>/2020/07/31/Ver2-12/</url>
    <content><![CDATA[<!-- ## 💥新增 -->
<h2 id="💥-更新内容"><a href="#💥-更新内容" class="headerlink" title="💥 更新内容"></a>💥 更新内容</h2><ol>
<li>修复 部分”firewall”拼写错误的问题</li>
<li>去除 依赖之前网站的部分功能</li>
</ol>
<a id="more"></a>

<h2 id="🛠-下载地址"><a href="#🛠-下载地址" class="headerlink" title="🛠 下载地址"></a>🛠 下载地址</h2><p>Ver2.12: <a href="https://545c.com/file/14549722-455771279" target="_blank" rel="noopener">下载地址</a> <a href="https://rosjb.lanzous.com/inDljf67zha" target="_blank" rel="noopener">备用地址</a><br>解压密码:1234<br>md5:f38b596703c4eb4aed19f0997fb7457a (压缩包的MD5)</p>
<h2 id="📣-讨论群"><a href="#📣-讨论群" class="headerlink" title="📣 讨论群"></a>📣 讨论群</h2><p>QQ群: <a href="https://jq.qq.com/?_wv=1027&k=HL2Nblf5" target="_blank" rel="noopener">772833948</a> (rosjb)</p>
]]></content>
      <tags>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>Mikrotik CCR1072-1G-8S+ 性能测试[视频]</title>
    <url>/2016/09/26/mikrotik-ccr1072-performance-test/</url>
    <content><![CDATA[<p><strong>硬件图片:</strong></p>
<p><img src="/2016/09/26/mikrotik-ccr1072-performance-test/1055_l.jpg" alt></p>
<hr>
<p><strong>我们首先来看下官网给出的硬件参数:</strong></p>
<h2 id="CCR1072-1G-8S"><a href="#CCR1072-1G-8S" class="headerlink" title="CCR1072-1G-8S+"></a>CCR1072-1G-8S+</h2><a id="more"></a>

<p>Our new flagship router, the CCR1072, is powered by a Tilera 72 core CPU, each core is clocked at 1GHz, and to fully utilise this power, the CCR1072 is equipped with eight independently connected 10G SFP+ ports. </p>
<p>The unit comes equipped with installed RouterOS L6, 16GB of built in ECC RAM, touchscreen color LCD, two removable (hotplug) power supplies for redundancy, smart card slot, microUSB, regular size USB, microSD and 2x M.2 slots for additional storage. </p>
<p>Thanks to the unique 72 core processor and ports that are directly connected to the CPU, CCR1072 is capable of over 120 million packets per second throughput.</p>
<h2 id="Product-specifications"><a href="#Product-specifications" class="headerlink" title="Product specifications"></a>Product specifications</h2><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><table>
<thead>
<tr>
<th>Product code</th>
<th>CCR1072-1G-8S+</th>
</tr>
</thead>
<tbody><tr>
<td>CPU nominal frequency</td>
<td>1 GHz</td>
</tr>
<tr>
<td>CPU core count</td>
<td>72</td>
</tr>
<tr>
<td>Architecture</td>
<td>TILE</td>
</tr>
<tr>
<td>Size of RAM</td>
<td>16 GB</td>
</tr>
<tr>
<td>10/100/1000 Ethernet ports</td>
<td>1</td>
</tr>
<tr>
<td>Number of USB ports</td>
<td>2</td>
</tr>
<tr>
<td>Memory Cards</td>
<td>3</td>
</tr>
<tr>
<td>Memory card type</td>
<td>microSD, 2x M.2</td>
</tr>
<tr>
<td>Supported input voltage</td>
<td>12 V – 12 V</td>
</tr>
<tr>
<td>Voltage Monitor</td>
<td>Yes</td>
</tr>
<tr>
<td>CPU temperature monitor</td>
<td>Yes</td>
</tr>
<tr>
<td>PCB temperature monitor</td>
<td>Yes</td>
</tr>
<tr>
<td>Dimensions</td>
<td>443x315x44mm</td>
</tr>
<tr>
<td>Operating System</td>
<td>RouterOS</td>
</tr>
<tr>
<td>Tested ambient temperature</td>
<td>-20C .. +60C</td>
</tr>
<tr>
<td>License level</td>
<td>6</td>
</tr>
<tr>
<td>Current Monitor</td>
<td>Yes</td>
</tr>
<tr>
<td>CPU</td>
<td>TLR4-07280DG-10CE</td>
</tr>
<tr>
<td>Max Power consumption</td>
<td>125W</td>
</tr>
<tr>
<td>SFP+ ports</td>
<td>8</td>
</tr>
<tr>
<td>USB slot type</td>
<td>USB type A</td>
</tr>
<tr>
<td>Serial port</td>
<td>RJ45</td>
</tr>
<tr>
<td>Storage type</td>
<td>NAND</td>
</tr>
<tr>
<td>Storage size</td>
<td>128 MB</td>
</tr>
<tr>
<td>Suggested price</td>
<td>3050</td>
</tr>
</tbody></table>
<hr>
<p><strong>下面我们来看下国外大佬的性能测试图(特意搬砖来分享给大家):</strong></p>
<iframe height="270" width="480" src="https://player.youku.com/embed/XMTczOTM0Njc3Ng==" frameborder="0" 'allowfullscreen'></iframe>]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>CCR1072</tag>
      </tags>
  </entry>
  <entry>
    <title>MikroTik RouterOS 各级授权的区别</title>
    <url>/2016/04/20/mikrotik-routeros-%E5%90%84%E7%BA%A7%E6%8E%88%E6%9D%83%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>Level number</th>
<th>0 (FREE)</th>
<th>1 (DEMO)</th>
<th>3 (WISP CPE)</th>
<th>4 (WISP)</th>
<th>5 (WISP)</th>
<th>6 (Controller)</th>
</tr>
</thead>
<tbody><tr>
<td>Price</td>
<td>no key</td>
<td>registration required</td>
<td>volume only</td>
<td>45</td>
<td>95</td>
<td>$250</td>
</tr>
<tr>
<td>Upgradable To</td>
<td>-</td>
<td>no upgrades</td>
<td>ROS v4.x</td>
<td>ROS v4.x</td>
<td>ROS v5.x</td>
<td>ROS v5.x</td>
</tr>
<tr>
<td>Initial Config Support</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>15 days</td>
<td>30 days</td>
<td>30 days</td>
</tr>
<tr>
<td>Wireless AP</td>
<td>24h limit</td>
<td>-</td>
<td>-</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Wireless Client and Bridge</td>
<td>24h limit</td>
<td>-</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>RIP, OSPF, BGP protocols</td>
<td>24h limit</td>
<td>-</td>
<td>yes(*)</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>EoIP tunnels</td>
<td>24h limit</td>
<td>1</td>
<td>unlimited</td>
<td>unlimited</td>
<td>unlimited</td>
<td>unlimited</td>
</tr>
<tr>
<td>PPPoE tunnels</td>
<td>24h limit</td>
<td>1</td>
<td>200</td>
<td>200</td>
<td>500</td>
<td>unlimited</td>
</tr>
<tr>
<td>PPTP tunnels</td>
<td>24h limit</td>
<td>1</td>
<td>200</td>
<td>200</td>
<td>500</td>
<td>unlimited</td>
</tr>
<tr>
<td>L2TP tunnels</td>
<td>24h limit</td>
<td>1</td>
<td>200</td>
<td>200</td>
<td>500</td>
<td>unlimited</td>
</tr>
<tr>
<td>OVPN tunnels</td>
<td>24h limit</td>
<td>1</td>
<td>200</td>
<td>200</td>
<td>unlimited</td>
<td>unlimited</td>
</tr>
<tr>
<td>VLAN interfaces</td>
<td>24h limit</td>
<td>1</td>
<td>unlimited</td>
<td>unlimited</td>
<td>unlimited</td>
<td>unlimited</td>
</tr>
<tr>
<td>HotSpot active users</td>
<td>24h limit</td>
<td>1</td>
<td>1</td>
<td>200</td>
<td>500</td>
<td>unlimited</td>
</tr>
<tr>
<td>RADIUS client</td>
<td>24h limit</td>
<td>-</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Queues</td>
<td>24h limit</td>
<td>1</td>
<td>unlimited</td>
<td>unlimited</td>
<td>unlimited</td>
<td>unlimited</td>
</tr>
<tr>
<td>Web proxy</td>
<td>24h limit</td>
<td>-</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Synchronous interfaces</td>
<td>24h limit</td>
<td>-</td>
<td>-</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>User manager active sessions</td>
<td>24h limit</td>
<td>1</td>
<td>10</td>
<td>20</td>
<td>50</td>
<td>Unlimited</td>
</tr>
<tr>
<td>Number of KVM guests</td>
<td>none</td>
<td>1</td>
<td>Unlimited</td>
<td>Unlimited</td>
<td>Unlimited</td>
<td>Unlimited</td>
</tr>
</tbody></table>
<a id="more"></a>
<p>各符号代表:<br>– : 不支持<br>unlimited: 无限制<br>yes: 支持</p>
<h3 id="如何查看-ROS-等级"><a href="#如何查看-ROS-等级" class="headerlink" title="如何查看 ROS 等级?"></a>如何查看 ROS 等级?</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/system license</span><br></pre></td></tr></table></figure>

<p><img src="/2016/04/20/mikrotik-routeros-%E5%90%84%E7%BA%A7%E6%8E%88%E6%9D%83%E7%9A%84%E5%8C%BA%E5%88%AB/ros%E7%AD%89%E7%BA%A7.jpg" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>license</tag>
        <tag>ros等级</tag>
        <tag>授权</tag>
      </tags>
  </entry>
  <entry>
    <title>ros怎么配置DMZ?</title>
    <url>/2016/09/22/ros%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AEDMZ/</url>
    <content><![CDATA[<p>简单的说，当我们内网服务器的所有端口都需要开放到外网的时候，我们需要使用DMZ功能。本文将演示如何将内网IP10.10.10.2的所有端口映射，开放到公网： </p>
<p><strong>DMZ是英文“demilitarized zone”的缩写，中文名称为“隔离区”，也称“非军事化区”。</strong></p>
<p>它是为了解决安装防火墙后外部网络不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区，这个缓冲区位于企业内部网络和外部网络之间的小网络区域内，在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web 服务器、FTP 服务器和论坛等。<br>另一方面，通过这样一个DMZ 区域，更加有效地保护了内部网络，因为这种网络部署，比起一般的防火墙方案，对攻击者来说又多了一道关卡。 路由器一般需要3 张网卡（Public 公网，Local 本地网络，DMZ-Zone 非军事区）</p>
<a id="more"></a>
<h3 id="操作路径：ip-firewall-NAT"><a href="#操作路径：ip-firewall-NAT" class="headerlink" title="操作路径：ip-firewall-NAT:"></a>操作路径：ip-firewall-NAT:</h3><p><img src="/2016/09/22/ros%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AEDMZ/dmz-1.png" alt></p>
<p><img src="/2016/09/22/ros%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AEDMZ/dmz-2.png" alt></p>
<p>可以分多条处理比如TCP和UDP协议分开处理，如果8291用于管理ROS的话也要考虑。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>DMZ</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要做这样一个东西?-ROS脚本生成器</title>
    <url>/2015/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<p>前言:接触ROS也有快2年的时间了,之前用的都是国产的一些不入流的路由(TPlink之类的),运营商的定制路由就更不用说了. </p>
<p>接触到ROS了,才发现ROS的强大,加了一些ROS的群,也了解了一些ROS大神,看了许多视频教程,特别是<font color="red">大玩家</font>的视频教程深受启发以及<font color="red">余松(yusong)</font>大大的一些关于<a href="http://www.irouteros.com/?page_id=186" target="_blank" rel="noopener">ROS,PDF参考文件</a>,感谢各位大大的奉献,虽然我们从未交流过;ROS的精髓也就是脚本(script),各种流控,HTB,PCC,PCQ,让一款Linux开发的路由系统,发挥的淋漓尽致; </p>
<a id="more"></a>
<p>ROS就好比photoshop,只有你想不到的,没有他做不到的,事实的确如此,虽然本人不是做宽带业务的,只是一枚生活在金字塔最底层的屌丝,但是也希望能为ROS的发展做一些事,所以就想开发一款ROS的脚本生成器<font color="blue">(让天下没有编写不出的ROS脚本-我的初衷)</font>之前有老人开发过类似的软件,支持2.X/3.X/4.X系统的脚本生成器,但随着ROS系统的不断更新和升级,之前版本的脚本生成器,有些地方已经不能完全兼容现在的系统了,所以势在必行开发支持5.X-6.X的脚本生成器.</p>
<p><font color="red">想法:脚本生成器对从没接触过ROS的新手来说还是比较难懂的,因为目前没有想法让新手完全会用这个东西,毕竟ROS的脚本,一定要有ROS的基础知识才能看懂,所以一些ROS的基础知识在软件里会很少提到,在一些比较容易犯错的地方会提示或注释.</font>只要各位朋友有需求,都可以留言提交给我,我会收集各位的需求,然后酌情优先添加功能. </p>
<p><font color="red"><strong>本人只有一条电信光纤的PPPoE线路,所以在多线和多运营商方面的脚本测试方面有很多不方便,只能靠大家的反馈才能修改,带来不便,提前深表歉意,如果有愿意提供闲置的多线路的ROS路由,我就可以远程方便测试多线的脚本并修改错误!</strong> </font></p>
<p>如果在版本发布后,各位有任何问题都可以留言,总结问题后在下个版本修复.</p>
<hr>
<p>开发内容(暂定):</p>
<ol>
<li>N年前的几个脚本生成器的软件的功能全都有,并且只兼容5.X/6.X版本(目前最流行的2个版本)</li>
<li><del>收集所有网络游戏的端口(尽量收集全,毕竟我不是做网吧项目和网管的,只是屌丝一枚,只能靠广大的用户提供和收集),此功能是方便网吧用户的(工作量太大已放弃)</del></li>
<li>L7之类的协议脚本.(beta V2.1版本已添加网上现行的L7协议)</li>
<li>目前功能的拓展,许多参数可以自定义,个性化(比如备注之类的一键生成)</li>
</ol>
<hr>
<p>其他:开发这个东西,我相信肯定会动了那些靠ROS吃饭的人的蛋糕,因为我本身就不是做宽带业务的人,所以各位没必要说什么东西,做这个软件的目的就是为了让大家更方便的写出自己需要的ROS脚本,而不需要每次都要记住那些脚本的语法和单词,就好比学英语一样,其实英语只要会说会理解,但不一定记住每个单词的拼写,就能和别人交流;ROS其实也一样,只要能看懂,但不一定要记住每个单词的意思即可. </p>
<p>本来想用国外的云服务器或者VPS搭建这个网站的,想想国外的服务器经过GWF一过滤,浏览速度比较慢,所以还是决定用国内的云主机服务器,这样访问不会卡,体验也比较好了,每个月60元的服务器费用,对我屌丝来说也是一笔不小的开支!</p>
<hr>
<p><strong>2020-08-01更新: 由于租用国内服务器费用昂贵,2020-08-01已经将博客搬迁到github上了,以后大家可以在此交流!</strong></p>
]]></content>
  </entry>
  <entry>
    <title>提问的智慧</title>
    <url>/2020/06/10/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
    <content><![CDATA[<p>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</p>
<p><a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>
<p>这是一篇长文，看完需要十几分钟的时间。如果之前没有认真看过并且思考过，这十几分钟会改变你的职业生涯。<a id="more"></a>这文章可能会出现一些让人不适的词语或者过时的例子，但我认为这不会影响它要表达的内容，而你需要好好琢磨作者的思想。</p>
<p>《提问的智慧》是一个敲门砖，它把黑客间的礼仪和准则明白地写下来，让我们了解到一个事实，为什么那些看起来很牛的人几乎从不提问。其实他们也有问题，但是通常在提问之前就自己解决了。不是因为他们本来就牛，而是解决问题的经历让他们成为牛人。最终，你只会看到网络上多了一篇文章：关于解决XXX问题的方案。</p>
<p>要不要花十几分钟改变自己的人生，决定权在自己。</p>
]]></content>
      <tags>
        <tag>提问</tag>
      </tags>
  </entry>
  <entry>
    <title>MikroTik RouterOS v6 有哪些新的特性?</title>
    <url>/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h4 id="支持新产品"><a href="#支持新产品" class="headerlink" title="支持新产品"></a>支持新产品</h4><ul>
<li>CloudCoreRouter、CloudRouterSwitch和其他新设备将只在RouterOS v6.x中得到完全支持</li>
</ul>
<hr>
<h4 id="新的Linux内核"><a href="#新的Linux内核" class="headerlink" title="新的Linux内核"></a>新的Linux内核</h4><ul>
<li>RouterOS 5.25 – Linux Kernel version 2.6.35</li>
<li>RouterOS 6.x – Linux Kernel version 3.3.5+</li>
<li>更新详细细节请看: <a href="http://www.kernel.org/" target="_blank" rel="noopener">http://www.kernel.org/</a><a id="more"></a>
</li>
</ul>
<hr>
<h4 id="新的CPU架构支持"><a href="#新的CPU架构支持" class="headerlink" title="新的CPU架构支持"></a>新的CPU架构支持</h4><ul>
<li>在v5.x中,有4种不同的架构<ul>
<li>mipsle (RB1xx, RB5xx)</li>
<li>mipsbe (RB4xx, RB7xx, RB9xx, RB2011, SXT, Sextant, Groove, Metal, CRS)</li>
<li>ppc (RB1xxx, RB6xx, RB8xx)</li>
<li>x86</li>
</ul>
</li>
<li>在 v6.x 还有一个架构<ul>
<li>tile (CCR1xxx)</li>
</ul>
</li>
</ul>
<hr>
<h4 id="RouterOS-tile-架构"><a href="#RouterOS-tile-架构" class="headerlink" title="RouterOS tile 架构"></a>RouterOS tile 架构</h4><ul>
<li>只适用于CCR设备</li>
<li>64位操作系统(更多的RAM)</li>
<li>支持双通道内存(更快的RAM)</li>
<li>硬件加速多线程(不需要<strong>RPS</strong>和<a href="https://baike.baidu.com/item/IRQ/1229055?fr=aladdin" target="_blank" rel="noopener">IRQ</a>管理)</li>
</ul>
<h4 id="RPS"><a href="#RPS" class="headerlink" title="RPS"></a><strong>RPS</strong></h4><p><strong>Sub-menu level:</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/system resource rps</span><br></pre></td></tr></table></figure>

<p>此菜单允许启用接收包控制(RPS)，以减少单核心的使用。 由于每个设备队列的序列化，<a href="https://wiki.linuxfoundation.org/networking/napi" target="_blank" rel="noopener">NAPI</a>在高包负载下可能成为瓶颈。RPS将接收到的数据包处理的负载分布在多个核上。</p>
<p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/1.png" alt></p>
<hr>
<h4 id="新内核的特性"><a href="#新内核的特性" class="headerlink" title="新内核的特性"></a>新内核的特性</h4><ul>
<li>最新接口驱动程序支持x86系统</li>
<li>改进的界面管理—可缩放到最多几千个接口等等</li>
<li>占用更少的空间储存-运作良好的32 mib flash<br><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/2.png" alt></li>
</ul>
<hr>
<h4 id="还有什么其他新的东西吗"><a href="#还有什么其他新的东西吗" class="headerlink" title="还有什么其他新的东西吗?"></a>还有什么其他新的东西吗?</h4><ul>
<li>提升16个CPU核心限制</li>
<li>改进了多cpu系统上的RouterOS性能(高达20%)</li>
<li>改进的RouterBOARD接口驱动程序性能(高达30%)</li>
<li>Routerboard包现在合并到系统包中</li>
</ul>
<hr>
<h4 id="快速路径"><a href="#快速路径" class="headerlink" title="快速路径"></a>快速路径</h4><ul>
<li>快速路径允许在Linux内核中转发包，而不需要额外的处理。它显著提高了转发速度。</li>
<li>快速路径要求<ul>
<li>配置中应允许快速路径</li>
<li>接口驱动程序必须有支持</li>
<li>特定配置条件</li>
</ul>
</li>
<li>目前RouterOS有以下快速路径处理程序: ipv4，traffic generator，mpls，bridge</li>
<li>未来将添加更多处理程序。</li>
</ul>
<hr>
<h4 id="新的吞吐量测试结果"><a href="#新的吞吐量测试结果" class="headerlink" title="新的吞吐量测试结果"></a>新的吞吐量测试结果</h4><p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/3.png" alt></p>
<hr>
<h4 id="吞吐量-百万pps"><a href="#吞吐量-百万pps" class="headerlink" title="吞吐量(百万pps)"></a>吞吐量(百万pps)</h4><p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/4.png" alt></p>
<hr>
<h4 id="QoS系统修改了"><a href="#QoS系统修改了" class="headerlink" title="QoS系统修改了"></a>QoS系统修改了</h4><ul>
<li>某些特定配置中的简单队列和树队列可能在从RouterOS v3.x, v4.x, v5.x升级到RouterOS v6.x后失效</li>
<li>自动配置转换不可用, 因为某些配置可能导致无法访问路由器</li>
</ul>
<hr>
<h4 id="数据包流程图的变化"><a href="#数据包流程图的变化" class="headerlink" title="数据包流程图的变化"></a>数据包流程图的变化</h4><ul>
<li>在数据包的“生命周期”中，在多个不同的位置排队会导致多线程环境中性能的极大下降</li>
<li>在RouterOS v6.x中对QoS系统进行了重新设计，使路由器中的其他进程在同一位置排队</li>
<li>删除HTB“global-in”、“global-out”和“global-total”，为之代替的是HTB“global”，放置在路由器数据包“生命周期”的末尾。</li>
</ul>
<p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/5.png" alt><br><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/6.png" alt></p>
<hr>
<h4 id="额外的变化"><a href="#额外的变化" class="headerlink" title="额外的变化"></a>额外的变化</h4><ul>
<li>简单队列现在与队列树完全分离—相同的包可以在HTB“全局”和简单队列中捕获(在v5简单队列共享全局- HTBs中)</li>
<li>由于所有队列现在都发生在SRC-NAT之后，所以PCQ队列类型被更新，现在是NAT来感知的(来自连接跟踪)</li>
<li>现在可以为每个队列指定多个包标记</li>
</ul>
<hr>
<h4 id="简单队列-Simple-Queues"><a href="#简单队列-Simple-Queues" class="headerlink" title="简单队列(Simple Queues)"></a>简单队列(Simple Queues)</h4><ul>
<li>更新简单队列匹配算法</li>
<li>对于丢失现有简单队列的包，开销非常小</li>
<li>顶级简单队列现在在CPU内核之间进行平衡(32个队列比CCR1036上的1个队列快9倍)</li>
</ul>
<p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/7.png" alt></p>
<hr>
<h4 id="简单的简单队列"><a href="#简单的简单队列" class="headerlink" title="简单的简单队列"></a>简单的简单队列</h4><ul>
<li>“target-address”和”interface”参数合并为一个“target”参数</li>
<li>将”dst-address”参数改为”dst”，现在可以指定为接口</li>
<li>“direction “和”p2p”参数删除</li>
<li>现在必须在创建简单队列时指定“target”</li>
<li>分离的“优先级”参数用于下载、上传和总计</li>
</ul>
<h3 id="Simple-Queue-Interface-v5-x"><a href="#Simple-Queue-Interface-v5-x" class="headerlink" title="Simple Queue Interface v5.x"></a>Simple Queue Interface v5.x</h3><p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/8.png" alt></p>
<h3 id="Simple-Queue-Interface-v6-x"><a href="#Simple-Queue-Interface-v6-x" class="headerlink" title="Simple Queue Interface v6.x"></a>Simple Queue Interface v6.x</h3><p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/9.png" alt></p>
<hr>
<h4 id="防火墙的更改"><a href="#防火墙的更改" class="headerlink" title="防火墙的更改"></a>防火墙的更改</h4><ul>
<li>防火墙现在有“all-ether”、“all-wireless”、“allvlan”、“all-ppp”作为接口匹配的可能性</li>
<li>新的优先级(priority)匹配器</li>
<li>新的“change-dscp”选项“from-priority”和“from priority-to high-3-bits”</li>
<li>新的Mangle特性“snif-tzsp”，“snif-pc”发送数据包流到远程嗅探器</li>
</ul>
<hr>
<h4 id="隧道-Tunnels-的变化"><a href="#隧道-Tunnels-的变化" class="headerlink" title="隧道(Tunnels)的变化"></a>隧道(Tunnels)的变化</h4><ul>
<li>SSTP现在可以强制AES加密，而不是默认的RC4加密</li>
<li>PPP配置文件现在有“bridge-path-cost”和“bridge-port-priority”参数</li>
<li>PPP secret显示最后注销的日期和时间</li>
<li>Hotspot和PPP现在支持RADIUS中的多个地址列表</li>
<li>仅为“all-ppp”接口创建2条动态“change-mss” mangle规则;</li>
</ul>
<hr>
<h4 id="DHCP的变化"><a href="#DHCP的变化" class="headerlink" title="DHCP的变化"></a>DHCP的变化</h4><ul>
<li>dhcp选项现在可以通过混合不同的数据类型来指定</li>
<li>dhcp-client具有自定义dhcp-option特性(例如:/ip dhcp-client option print)</li>
<li>DHCPv4客户端现在为add-default-route参数提供了特殊类的选项</li>
<li>添加DHCP中继代理信息选项的可能性</li>
<li>DHCPv6 DNS选项支持</li>
</ul>
<hr>
<h4 id="其他的变化"><a href="#其他的变化" class="headerlink" title="其他的变化"></a>其他的变化</h4><ul>
<li>在bridge、bonding 或switch group中的接口将显示从属标志</li>
<li>“/export compact”现在默认为“/export”，使用“/export verbose”获取以前的行为</li>
<li>连接的路由在界面关闭时失效。</li>
<li>可配置的Linux内核选项在/ip settings 和/ipv6 settings menus</li>
<li>最初的OpenFlow支持</li>
</ul>
<hr>
<h4 id="IPSec-Road-Warrior"><a href="#IPSec-Road-Warrior" class="headerlink" title="IPSec Road Warrior"></a>IPSec Road Warrior</h4><ul>
<li>RoadWarrior 安装的支持<ul>
<li>Conf模式的支持</li>
<li>被动IPSec对等模式</li>
<li>Xauth支持(Xauth PSK和Hybrid  RSA)</li>
<li>策略模板和生成策略</li>
<li>Peer groups(对等组)</li>
<li>可以使用具有相同IP的多个对等点。</li>
<li>更多</li>
</ul>
</li>
</ul>
<hr>
<h4 id="SCEP-协议支持"><a href="#SCEP-协议支持" class="headerlink" title="SCEP 协议支持"></a>SCEP 协议支持</h4><ul>
<li>简单证书注册协议(SCEP)</li>
<li>本协议允许:<ul>
<li>从CA服务器或RA获取CA证书</li>
<li>使用临时密钥创建自签名证书</li>
<li>发送证书请求到服务器</li>
<li>使用CA密码保护CA操作</li>
</ul>
</li>
</ul>
<p>更多信息请访问:<a href="http://wiki.mikrotik.com/wiki/Manual:System/Certificates#SCEP" target="_blank" rel="noopener">http://wiki.mikrotik.com/wiki/Manual:System/Certificates#SCEP</a></p>
<hr>
<h4 id="先进的无线-Wireless-频道"><a href="#先进的无线-Wireless-频道" class="headerlink" title="先进的无线(Wireless )频道"></a>先进的无线(Wireless )频道</h4><ul>
<li>只能在Atheros AR92xx芯片和MikroTik设备之间工作<ul>
<li>-中心频率范围:<ul>
<li>2192 - 2734 mhz</li>
<li>4800 - 6100 mhz</li>
</ul>
</li>
</ul>
</li>
<li>选择精确的中心频率(0.5MHz步长)</li>
<li>选择通道宽度(2.5-30MHz, 0.5MHz步长)</li>
<li>使用高级频道需要获得超级频道许可——这是免费的(只需要签署关于正确使用的文件)</li>
<li>位于/interface wireless channels</li>
<li>允许命名每个高级频道，并将它们分组到自定义列表中</li>
<li>这些名称和列表名称稍后应该在wireless clients scan-list中使用，以使他们能够看到高级通道APs(老式的scanlist条目将无法工作)</li>
<li>自定义扫描列表选项:<ul>
<li>默认，频率，频率范围</li>
<li>高级频道名称或列表名称(list name)</li>
</ul>
</li>
</ul>
<hr>
<h4 id="先进的通道测试"><a href="#先进的通道测试" class="headerlink" title="先进的通道测试"></a>先进的通道测试</h4><ul>
<li>中心频率- 5362.5MHz</li>
<li>通道宽度- 30MHz</li>
<li>扩展通道-以上</li>
<li>最大数据速率- mcs - 15,405mbps</li>
<li>无线协议- 802.11n</li>
</ul>
<p><img src="/2019/03/21/mikrotik-routeros-v6-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7/10.png" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>ROS6版本新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>网吧的PCQ与HTB</title>
    <url>/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/</url>
    <content><![CDATA[<p>这里我们有一个实际环境，我们需要实现对带宽的动态分配； Tel 带宽为 6M， Un 带宽为 12M；</p>
<h3 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h3><p>1、在 ip firewall mangle 标记上下行数据流<br>2、进入 queue type 定义单机带宽<br>3、在 queue tree 定义总带宽和流量控制规则 </p>
<h4 id="步骤-1："><a href="#步骤-1：" class="headerlink" title="步骤 1："></a>步骤 1：</h4><p>在 Mangle 标记上下行的标记，这里我们使用的下载标记链表为 prerouting，上传标记链表用的是forward。 </p>
<a id="more"></a>

<p><img src="/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/img2056.jpg" alt></p>
<h4 id="步骤-2："><a href="#步骤-2：" class="headerlink" title="步骤 2："></a>步骤 2：</h4><p>在 Queue Type 里按照 200 台主机的数量，定义 PCQ 规则： </p>
<p><img src="/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/img2058.jpg" alt></p>
<h4 id="步骤-3："><a href="#步骤-3：" class="headerlink" title="步骤 3："></a>步骤 3：</h4><p>建立 Queue Tree 规则，记住保留一定带宽为缓冲， Un 我们保留 2M， Tel 我们保留 1.2M 带宽，这里下载使用的是 global-in，上传使用的是 global-out，记住 prerouting 和 input 链表标记的数据选择 global-in，其他两个链表 forward 和 output 则选择 global-out。</p>
<p><img src="/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/img2059.jpg" alt></p>
<h3 id="HTB-游戏优先"><a href="#HTB-游戏优先" class="headerlink" title="HTB 游戏优先"></a>HTB 游戏优先</h3><p>通过 HTB 为游戏预留带宽，保证在下载和视频情况下，游戏照样流畅， HTB+PCQ 组合实现，我们根据上面的实例配置，做以下配置调整： 步骤 1：在原有的动态的 PCQ 流控规则上进行改进，首先导入游戏端口，建立新的 gamesdown 链表，将游戏与其他数据区分出来 </p>
<p><img src="/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/img2061.jpg" alt></p>
<p>通过将指定的数据转移到游戏链表进行过滤和数据包处理： </p>
<p><img src="/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/img2062.jpg" alt></p>
<p>假设 Tel 带宽是 11M，预留 2M 为缓冲带宽，最大带宽为 9M， Tel 线路下行的 HTB 设置，游戏优先级为 1 最高，其他下行数据为 8 最低；这里游戏只分配了 3M 最大带宽，最低保证 2M，对于游戏带宽较小不需要那么大；其他下行数据最低保证 6M。 </p>
<p><img src="/2016/09/25/%E7%BD%91%E5%90%A7%E7%9A%84PCQ%E4%B8%8EHTB/img2063.jpg" alt></p>
<p> 如果需要也可以为游戏流量配置 PCQ 规则， 定义一个游戏的 PCQ 队列类型 Queue-type 对每个用户进行带宽控控制。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>HTB</tag>
        <tag>PCQ</tag>
      </tags>
  </entry>
  <entry>
    <title>用ROS创建PPPoE拨号上网-新手必看</title>
    <url>/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/</url>
    <content><![CDATA[<p>目前的网络大多采用ADSL接入的方式进行连接的。那么就需要进行PPPoE的拨号才能上网，现在普及的自动拨号方式是Modem接路由器，由路由器完成自动拨号。那么用ROS可不可以进行PPPoE的拨号呢？答案下面揭晓。</p>
<hr>
<a id="more"></a>

<p>一、在LAN口设一个IP地址，做为网关地址。<br>Network 和 Broadcast 会根据IP自动获取。<br><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/1.jpg" alt></p>
<p>二、创建一个PPPoE客户端，输入拨号的账户和密码: </p>
<p><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/2.jpg" alt></p>
<p><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/3.jpg" alt></p>
<p><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/4.jpg" alt></p>
<p>三、创建一条NAT动态地址映射，使内网地址能与外网通信：<br><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/5.jpg" alt></p>
<p><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/6.jpg" alt></p>
<p><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/7.jpg" alt></p>
<p> 一个用ROS进行PPPoE拨号的网络就创建完成了，下面是测试结果：<br><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/8.jpg" alt></p>
<p><img src="/2016/09/26/%E7%94%A8ROS%E5%88%9B%E5%BB%BAPPPoE%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91-%E6%96%B0%E6%89%8B%E5%BF%85%E7%9C%8B/9.jpg" alt></p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>PPPOE</tag>
      </tags>
  </entry>
  <entry>
    <title>同时建立 PPTP 和 L2TP 服务器</title>
    <url>/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>首先我们先看一下 PPTP 和 L2TP 的建立，同样是在 PPP 的目录下， interface 菜单中，选择 PPTP-Server 和L2TP-Server 并启用服务： </p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2396.jpg" alt> </p>
<a id="more"></a>
<p>在 L2TP 服务器配置下多了 Use IPsec 选项，这是在 RouterOS 6.16 后加入的 IPsec 选项，方便 windows 客户端的连接， Default-Profile 类型选择 default-encryption， Autentication 认证方式也可以选择相同方式。 </p>
<p>这里我们举一个实例，我们建立了一个主机的 VPN 服务，同时启用 PPTP 和 L2TP 方式，分配远程 IP 为192.168.89.2-192.168.89.254 的地址池，我用 192.168.89.1 做为 VPN 隧道的本地 IP。 </p>
<p>首先我进入 ip pool 中配置地址池： </p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2398.jpg" alt>  </p>
<p>配置好地址池后，在PPP Profiles 中使用默认的default-encryption 组规则，配合本地IP 地址192.168.89.1，在远程 remote-address 种配置之前添加号的地址池 VPN，设置 DNS 为 119.6.6.6,其他配置参数如下： </p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2399.jpg" alt></p>
<p>在 limits 选项中，配置相应的 Idle-timeout（空闲超时时间） 为 10 分钟、 Rate-limit（带宽） 为 1M 上行和2M 下行，配置 Only-one（帐号是否唯一性）： </p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2401.jpg" alt></p>
<p>在 PPP secret 中配置用户， 账号 yus，密码 yus， service 参数用于选择 VPN 类型，这里设置为默认 any 这样支持 L2TP 和 PPTP 登陆方式， profile 为 default-encryption: </p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2402.jpg" alt> </p>
<p>配置完成后，我们便可以通过 PPTP 或者 L2TP 连接 RouterOS 的 VPN 服务，在 windows 下可以通过 PPTP的方式直接连接 RouterOS 的 VPN 服务， 由于 windows 要求 L2TP 进行 IPsec 的加密方式连接， 所以需要在L2TP 配置 IPsec 密钥， 如果不考虑使用 IPsec 的 L2TP 连接，可以修改 windows 注册表。</p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2404.jpg" alt>  </p>
<p>Windows 配置在 VPN 属性中，选择“安全”， VPN 类型选择“使用 IPsec 的第 2 层隧道协议（ L2TP/IPsec）”，点击“高级设置”，设置“使用预共享的密钥作为身份验证” </p>
<p><img src="/2016/09/24/%E5%90%8C%E6%97%B6%E5%BB%BA%E7%AB%8B%20PPTP%20%E5%92%8C%20L2TP%20%E6%9C%8D%E5%8A%A1%E5%99%A8/img2405.jpg" alt> </p>
<p>L2TP 的 Windows 注册表修改<br>这里介绍的是在 Windows 下不使用 IPsec 的 L2TP 连接，后面有提到如何配置 RouterOS 使用 L2TP/IPsec的 Windows 连接。这里介绍修改 windows 的 L2TP 注册表，缺省的 Windows XP L2TP 传输策略不允许 L2TP传输不使用 IPSec 加密。可以通过修改 Windows XP 注册表来禁用缺省的行为，手工修改：</p>
<p>1) 进入 Windows XP 的开始 运行里面输入―Regedit，打开―注册表编辑器，定位―HKEY_Local_Machine \ System \ CurrentControl Set \ Services \ RasMan \Parameters ‖ 主键。<br>2) 为该主键添加以下键值： </p>
<ul>
<li>键值： ProhibitIpSec</li>
<li>数据类型： reg_dword</li>
<li>值： 1 </li>
</ul>
<p>修改后即可通过 windows 正常连接到 L2TP 服务。 在 RouterOS 6.16 后加入了 L2TP 服务中配置 IPsec 的选项，简化了 IPsec 配置操作，所以现在修改注册表会用到的人很少。<br>注： PPTP 和 L2TP 的连接端口都是固定的无法自定义，但 OVPN 和 SSTP 隧道 VPN 的连接端口可以自己定义，这有助于受到网络环境限制，采取灵活处理方法。</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>PPTP</tag>
        <tag>L2TP</tag>
      </tags>
  </entry>
  <entry>
    <title>骗子名单</title>
    <url>/2016/01/10/%E9%AA%97%E5%AD%90%E5%90%8D%E5%8D%95/</url>
    <content><![CDATA[<p><strong>有的人喜欢靠坑蒙拐骗维持生计,最近发现有人收费调试ROS,收了别人的钱,最后没调试好,也不退钱.发生这种事,这种人必须曝光!</strong> </p>
<p>为了不让更多的人受骗上当,专门开设了此板块,希望其他人在找人调试ROS的时候,看清楚有没有下面的名单.(如果各位已经有过先前被骗的经历和教训,也可以直接联系我或者再此留言,让我们共同抵制这种行为.)</p>
<a id="more"></a>
<hr>
<h3 id="骗子名单"><a href="#骗子名单" class="headerlink" title="骗子名单"></a><strong>骗子名单</strong></h3><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">QQ</th>
<th align="center">支付宝</th>
<th align="center">微信</th>
<th align="center">姓名</th>
<th align="center">电话</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">497503128</td>
<td align="center"><a href="mailto:386249051@qq.com">386249051@qq.com</a></td>
<td align="center"></td>
<td align="center">张寿坤</td>
<td align="center">15368395391</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2785378749</td>
<td align="center"><a href="mailto:386249051@qq.com">386249051@qq.com</a></td>
<td align="center"></td>
<td align="center">张寿坤</td>
<td align="center">15368395391</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">594505775</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">13556604526</td>
</tr>
</tbody></table>
<p><strong>PS:以上名单均为网友提供和证据!</strong></p>
]]></content>
      <tags>
        <tag>骗子名单</tag>
      </tags>
  </entry>
  <entry>
    <title>近期RouterOS的几个漏洞说明(中招的人不少)</title>
    <url>/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/</url>
    <content><![CDATA[<p>近期很多论坛和群报出各种漏洞问题，RouterOS被攻击，密码被修改，被上传恶意文件等，下面根据官方的信息普及下关于RouterOS的几种漏洞</p>
<hr>
<h3 id="20多万台MikroTik路由器被黑，用户被迫扛起锄头挖矿"><a href="#20多万台MikroTik路由器被黑，用户被迫扛起锄头挖矿" class="headerlink" title="20多万台MikroTik路由器被黑，用户被迫扛起锄头挖矿"></a>20多万台MikroTik路由器被黑，用户被迫扛起锄头挖矿</h3><p>研究人员发现20 多万台MikroTik路由器被黑客接管，让用户不知不觉中为他们挖矿。 </p>
<p>近日，安全研究人员发现了一场针对MikroTik路由器的大规模恶意劫持活动，利用Mikrotik企业路由器中的一个已知漏洞来接管路由器，向用户访问的页面注入Coinhive挖矿脚本。用户打开该网页后即开始挖掘门罗币，而挖矿所得将转发至黑客的账户地址。 </p>
<a id="more"></a>
<p>Trustwave SpiderLabs的安全研究员Simon Kenin表示，攻击的首先从巴西开始，第一阶段即感染了约72000台MikroTik路由器。</p>
<p>随后，这场恶意攻击迅速波及到全球20多万台MikroTik路由器，截至本文编译完成时，这一数字仍在增长。 </p>
<h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h4><p>本次攻击利用了MikroTik于今年4月23日修补的零日漏洞，虽然MikroTik修复该漏洞前后只用了一天，但还有成千上万的MikroTik路由器未能及时打上补丁，导致黑客乘虚而入。</p>
<p>该漏洞使得黑客能够通过Winbox从设备读取文件，获得对MikroTik路由器的未经身份验证的远程管理员访问权限。初步调查显示，黑客并不是在路由器上运行恶意可执行文件，而是通过路由器功能推送包含Coinhive挖矿脚本的自定义错误页面。 </p>
<h4 id="以下是Simon-Kenin的分析："><a href="#以下是Simon-Kenin的分析：" class="headerlink" title="以下是Simon Kenin的分析："></a>以下是Simon Kenin的分析：</h4><p>首先，在Shodan 搜索引擎上看到的所有页面实际上都是webproxy错误页面，可见黑客创建了一个包含Coinhive脚本的自定义错误页面：<br><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/817993dca0d1468ca95bb84c8a9f2184.jpeg" alt><br>黑客在文件系统中创建了一个自定义的错误页面_<br><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/6c14c5d37cff42f0bff99cec1f069934.jpeg" alt><br>该页面包含的内容_ 经过测试和Reddit用户的报告，会发生两种情况：</p>
<blockquote>
<p>接入到该路由器的用户，只要用户在浏览网页时跳转到任何类型的错误页面，都会打开这个包含Coinhive挖矿脚本的自定义错误页面。 如果后端本地服务器也连接到路由器，只要用户连接到了这个服务器，哪怕没有直接连接到受感染路由器，也会受到影响。</p>
</blockquote>
<p>而根据Reddit上一些用户的报告，他们在浏览网页时，每个网页都被注入了Coinhive挖矿代码。</p>
<p>得知该信息后，Simon Kenin进一步调查发现了另外一个脚本：<br><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/bf2865e9bf2e4800b79f0c2e87c34139.jpeg" alt><br> “3_”脚本_ _<br> 用户一连上路由器，脚本就开动了<br> 从上图中可以看到，用户一连接到无线网络，脚本立即执行。 由于服务器上没有mikrotik.php文件，因此该文件内容未知。它可能是用于将Coinhive挖矿代码注入每个html页面的脚本，至于如何实现，在本调查中也未能揭示，只能说这些黑客对于MikroTik路由器配置有着极深的理解。<br> 为什么这么说？请看以下截图，揭示了该攻击的持续机制：<br> <img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/dc2ec8d68f824e4d8a438779abc9c29f.jpeg" alt><br> 黑客添加的后台任务<br> 一共有两个任务：</p>
<blockquote>
<p>连接到另一台主机“min01.com”，并获取一个新的“error.html”文件。这是为了Coinhive平台屏蔽了黑客当前使用的站点密钥后，使用另一个站点密钥来替换它。 </p>
</blockquote>
<blockquote>
<p>下载并执行为名为“u113.rsc”的脚本。目前可以看到该脚本仅用于占位，但这一看就知道是向所有被接管的设备发送附加命令的一种途径。</p>
</blockquote>
<p><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/aa0e7fd4c2b542eca672c380ab28464e.jpeg" alt><br>在编译本文时看到的脚本内容</p>
<p>在调查过程中，Simon Kenin还确定了黑客在寻找新的包含该漏洞的路由器时使用的脚本:</p>
<p><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/af4e07a995b84ace9486ffab5cf714b1.jpeg" alt></p>
<p>路由器受到感染时执行的命令</p>
<p>我们可以看到该脚本修改了一些系统设置、启用了代理、获取了自定义错误页面，并根据需要创建了更新的计划任务，最后还创建了名为“ftu”的后门帐户。</p>
<p>这个脚本正不断添加更多清理命令，进一步降低占用空间并减少将Coinhive挖矿代码注入每个网页时产生的线索，最终降低被检测的风险。</p>
<p><strong>越来越小心的黑客</strong></p>
<p>从大张旗鼓的加密勒索软件，到现在隐藏在信息流里的挖矿代码，黑客的思维方式也从一锤子买卖转向了更长久的非法利益。 </p>
<p>在海量的网页中注入Coinhive挖矿代码不可能不被发现，越来越多用户的怒火必然会推动用户自己和ISP调查问题的根源。安全研究员Simon Kenin在进行调查时，只在路由器返回的错误页面中发现了注入的Coinhive脚本，这说明其他用户在网络上提出问题之后，黑客切换了策略，缩小攻击面的同时提升了攻击的量级，即仅在错误页面注入挖矿代码，感染更多的MikroTik路由器。但由于部署MikroTik路由器的企业数量巨大，包含该挖矿代码的页面的出现次数仍可达到数百万次。 </p>
<p>在管理员为路由器打上补丁之前，这场攻击仍将继续，Freebuf小编将持续关注并为大家更新信息，也请使用MikroTik路由器的小伙伴赶紧自查起来。</p>
<hr>
<h3 id="Mikrotik的Winbox的任意文件访问漏洞的PoC流出，漏洞公布以后仍旧没有引起网络管理者足够的重视，敦促所有ROS管理员尽快升级"><a href="#Mikrotik的Winbox的任意文件访问漏洞的PoC流出，漏洞公布以后仍旧没有引起网络管理者足够的重视，敦促所有ROS管理员尽快升级" class="headerlink" title="Mikrotik的Winbox的任意文件访问漏洞的PoC流出，漏洞公布以后仍旧没有引起网络管理者足够的重视，敦促所有ROS管理员尽快升级"></a>Mikrotik的Winbox的任意文件访问漏洞的PoC流出，漏洞公布以后仍旧没有引起网络管理者足够的重视，敦促所有ROS管理员尽快升级</h3><p>相关的技术讨论作者在 21 May 2018 日就以文章的形式详细阐述 <a href="https://n0p.me/winbox-bug-dissection/" target="_blank" rel="noopener">https://n0p.me/winbox-bug-dissection/</a>  ，漏洞大致是这样的：</p>
<ol>
<li>Winbox申请登录以后会从RouterOS里面下载一些适用于当前版本的ROS的DLL文件作为Winbox的功能模块来执行，但是这个下载行为没有恰当的鉴权，通过精心构造的请求包，可以下载任意文件，包括RouterOS的用户数据库文件。</li>
<li>RouterOS的用户数据库存储的密码没有使用标准的加密方式加密，只是把密码原文和 md5(用户名 + “283i4jfkai3389”) 做了一次XOR运算，运算结果完全可逆，几乎可以认为是明文存储了密码，使用mikrotik-tools <a href="https://github.com/0ki/mikrotik-tools" target="_blank" rel="noopener">https://github.com/0ki/mikrotik-tools</a> 包含的解码文件可以直接还原出明文密码，导致路由器沦陷。</li>
<li>影响范围 6.29 (release date: 2015/28/05) to 6.42 (release date 2018/04/20)</li>
</ol>
<p><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/66e70428gy1fswvr7nmf1j20tg0id102.jpg" alt><br><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/66e70428gy1fswvr7i5ruj20l704xq3g.jpg" alt><br>相关的PoC已经以源代码形式放出 <a href="https://github.com/BasuCert/WinboxPoC" target="_blank" rel="noopener">https://github.com/BasuCert/WinboxPoC</a> ，我测试了几台身边朋友的ROS，基本上都中招，而且有些管理员为了方便，使用虚拟专用网或者 IPIP、GRE隧道等打通自己所管理ROS的内网，导致一些本来在内网的ROS路由器、AP、可以被一个一个的沦陷掉。</p>
<p>目前搜索国内相关报道，只有寥寥数片文章讲到了 <a href="https://www.toutiao.com/i6548225294128382468" target="_blank" rel="noopener">https://www.toutiao.com/i6548225294128382468</a> 文章时间也比较早，今天已经7月份了，身边主动升级ROS的用户凤毛麟角，<strong>当然和消息没有充分散播也有关系，特此发文，敦促所有ROS管理员尽快升级到6.42.1+ 或者最新版本。</strong></p>
<p><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/66e70428gy1fswvr7ixd3j20tf0if75s.jpg" alt></p>
<h3 id="关于WEB-服务的漏洞"><a href="#关于WEB-服务的漏洞" class="headerlink" title="关于WEB 服务的漏洞"></a>关于WEB 服务的漏洞</h3><p>WikiLeaks 开始使用一个新的代号 Vault 7 作为美国中情局（CIA）的敏感信息披露计划，这次被发布的第一份档案 Year Zero 大小高达 513MB，一共包含 8,761 份相关敏感文档。根据维基解密的阐述，这份包含了大量 0day，恶意软件，病毒，木马以及相关文档的高度机密资料，在美国政府黑客和承包商之间传播，其中有人向维基解密提交了这份绝密档案的部分内容。 </p>
<p>关于www服务器的漏洞，是从2017年维基解密公布新的代号 Vault 7的文档，据维基解密的阐述，这份包含了大量 0day，恶意软件，病毒，木马以及相关文档的高度机密资料，在美国政府黑客和承包商之间传播，其中有人向维基解密提交了这份绝密档案的部分内容。 </p>
<p>如果没有防火墙来保护www服务，该漏洞直接影响到RouterOS的webfig网页配置接口，MikroTik修改该漏洞从6.37.5 Bugfix 版本和6.38.5 发行版本，这两个版本都是在2017年3月9日发布 </p>
<p>该漏洞后来被几个恶意攻击利用，并且影响到之前未修复的RouterOS，以及将www服务端口（TCP 80端口）开放给不信任网络RouterOS系统。 </p>
<h4 id="1、VPNfilter"><a href="#1、VPNfilter" class="headerlink" title="1、VPNfilter"></a>1、VPNfilter</h4><p>在2018年5月22日，MikroTik接到Cisco通知，一个恶意工具VPNfilter在多个网络设备中被发现，其中包括三款MikroTik的设备。MikroTik高度重视，该恶意软件通过RouterOS的一个漏洞安装进系统，但在2017年3月，MikroTik已经修补过该漏洞，被攻击的是老版本的RouterOS。因此建议尽快升级RouterOS最新版本，如果有更多关于该漏洞的消息请与MikroTik联系（<a href="mailto:support@mikrotik.com">support@mikrotik.com</a>）。 </p>
<p>如果你运行的RouterOS版本是在2017年3月之前（6.37.5 bugifx版本和6.38.5发行版本），并且允许不信任网络访问设备的www服务（TCP 80端口） </p>
<p>P.S: VPNfilter这个名字只是被发现的恶意软件的代号（更具体地说，是一个假的可执行名称），这个工具的执行方式与VPN隧道没有关联. 从基本的角度看，恶意软件可以嗅探某些类型的流量，并将其发送到某个地方，或者让路由器系统崩溃。 </p>
<h4 id="2、流氓僵尸工具"><a href="#2、流氓僵尸工具" class="headerlink" title="2、流氓僵尸工具"></a>2、流氓僵尸工具</h4><p>近期MikroTik官方注意到，一款流氓僵尸网络正在扫描随机的公共IP地址，以找到那些打开Winbox（TCP 8291）和WWW（TCP 80）端口的RouterOS，并利用以上描述的几个漏洞进行恶意攻击。注意Winbox与该漏洞没有关系，只是利用winbox的端口来识别MikroTik的RouterOS设备，当识别到后，会继续尝试通过TCP 80端口攻击 如果在最近一年时间未升级过RouterOS，强烈的建议升级你的RouterOS设备，仅需要在winbox中打开/system packages 点击check for updates，选择Download&amp;install，即可升级（确保RouterOS能正常连接网络，并在ip-&gt;dns下配置好dns服务器）</p>
<p><img src="/2018/09/25/%E8%BF%91%E6%9C%9FRouterOS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%8B%9B%E7%9A%84%E4%BA%BA%E4%B8%8D%E5%B0%91)/rosupgrad.png" alt></p>
<p>对于80端口的RouterOS如何确定是否安全？</p>
<p>– 如果你在最近一年内升级了RouterOS，是安全的<br>– 如果你在ip service关闭掉了www服务，是安全的<br>– 如果你有防火墙配置保护TCP 80端口，确保配置正确，是安全的<br>– 如果你的Hotspot只对局域网服务，但Webfig不能访问，是安全的 – 如果你的User Manager只对局域网服务，但Webfig不能访问，是安全的.<br>– 如果你修改了Winbox默认端口，你可以幸免不会被扫描到，但并不代表不会被感染 – 如果你关闭Winbox端口，你可以幸免不会被扫描到，但并不代表不会被感染<br>– 如果”ip service”的 “allowed-from” 参数设置了信任网络，在信任网络内没有被感染设备，是安全的<br>– 如果Webfig仅局域网可访问，需要小心被局域网感染设备所利用</p>
<h5 id="如果保护？"><a href="#如果保护？" class="headerlink" title="如果保护？"></a>如果保护？</h5><ol>
<li>升级RouterOS最新版本，升级方式：Winbox中打开/system packages 点击check for updates，选择Download&amp;install 升级 </li>
<li>修改你的RouterOS所有管理员密码 </li>
<li>根据MikroTik官方指南保护你的设备，下面是官方提供的保护路由器的防火墙规则介绍 <a href="https://wiki.mikrotik.com/wiki/Manual:Securing\_Your\_Router" target="_blank" rel="noopener">https://wiki.mikrotik.com/wiki/Manual:Securing\_Your\_Router</a>   </li>
</ol>
<h5 id="如果监测"><a href="#如果监测" class="headerlink" title="如果监测?"></a>如果监测?</h5><p>– 升级到6.38.5或更高版本，将会删除掉漏洞文件，修改密码，安全之前提到的方法保护到TCP 80端口<br>– 如果你升级设备后，仍然能看通过telnet或其他方式非法访问你的路由器，请打开Tool/torch工具，找到攻击源，但你本地网络的其他设备被感染，也请及时做出升级处理和安全措施     </p>
<h3 id="关于Winbox漏洞"><a href="#关于Winbox漏洞" class="headerlink" title="关于Winbox漏洞"></a>关于Winbox漏洞</h3><p>RouterOS发现一个新的漏洞，针对RouterOS v6.29以后的版本，从6.29到6.43rc3受到该漏洞影响。这个漏洞与之前的TCP 80端口不同，这个是直接针对Winbox 8291端口</p>
<p>漏洞说明：该漏洞通过一个特定的工具连接winbox端口（tcp/8291），并获取系统管理员的数据文件，从而得到RouterOS的登录账号和密码。 </p>
<p>受影响版本：6.29到6.43rc3受到该漏洞影响，从v6.40.8、v6.42.1和v6.43rc4修复该漏洞，请大家及时更新版本! </p>
<p>升级完成后，及时更改密码 升级操作：/system packages 点击check for updates，选择Download&amp;install 升级</p>
]]></content>
      <categories>
        <category>技术讨论</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
</search>
